// source: iracing-proto/broadcast.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.iracing.broadcast.CameraDetail', null, global);
goog.exportSymbol('proto.iracing.broadcast.CameraGroup', null, global);
goog.exportSymbol('proto.iracing.broadcast.CameraSetStateRequest', null, global);
goog.exportSymbol('proto.iracing.broadcast.CameraSetStateResponse', null, global);
goog.exportSymbol('proto.iracing.broadcast.CameraState', null, global);
goog.exportSymbol('proto.iracing.broadcast.CameraSwitchNumberRequest', null, global);
goog.exportSymbol('proto.iracing.broadcast.CameraSwitchNumberResponse', null, global);
goog.exportSymbol('proto.iracing.broadcast.CameraSwitchPositionRequest', null, global);
goog.exportSymbol('proto.iracing.broadcast.CameraSwitchPositionResponse', null, global);
goog.exportSymbol('proto.iracing.broadcast.ChatCommandMode', null, global);
goog.exportSymbol('proto.iracing.broadcast.ChatCommandRequest', null, global);
goog.exportSymbol('proto.iracing.broadcast.ChatCommandResponse', null, global);
goog.exportSymbol('proto.iracing.broadcast.ForceFeedbackCommandMode', null, global);
goog.exportSymbol('proto.iracing.broadcast.ForceFeedbackCommandRequest', null, global);
goog.exportSymbol('proto.iracing.broadcast.ForceFeedbackCommandResponse', null, global);
goog.exportSymbol('proto.iracing.broadcast.GetAvailableCamerasResponse', null, global);
goog.exportSymbol('proto.iracing.broadcast.PitCommandMode', null, global);
goog.exportSymbol('proto.iracing.broadcast.PitCommandRequest', null, global);
goog.exportSymbol('proto.iracing.broadcast.PitCommandResponse', null, global);
goog.exportSymbol('proto.iracing.broadcast.ReloadTexturesRequest', null, global);
goog.exportSymbol('proto.iracing.broadcast.ReloadTexturesResponse', null, global);
goog.exportSymbol('proto.iracing.broadcast.ReplayPositionMode', null, global);
goog.exportSymbol('proto.iracing.broadcast.ReplaySearchMode', null, global);
goog.exportSymbol('proto.iracing.broadcast.ReplaySearchRequest', null, global);
goog.exportSymbol('proto.iracing.broadcast.ReplaySearchResponse', null, global);
goog.exportSymbol('proto.iracing.broadcast.ReplaySearchSessionTimeRequest', null, global);
goog.exportSymbol('proto.iracing.broadcast.ReplaySearchSessionTimeResponse', null, global);
goog.exportSymbol('proto.iracing.broadcast.ReplaySetPlayPositionRequest', null, global);
goog.exportSymbol('proto.iracing.broadcast.ReplaySetPlayPositionResponse', null, global);
goog.exportSymbol('proto.iracing.broadcast.ReplaySetPlaySpeedRequest', null, global);
goog.exportSymbol('proto.iracing.broadcast.ReplaySetPlaySpeedResponse', null, global);
goog.exportSymbol('proto.iracing.broadcast.ReplaySetStateRequest', null, global);
goog.exportSymbol('proto.iracing.broadcast.ReplaySetStateResponse', null, global);
goog.exportSymbol('proto.iracing.broadcast.ReplayStateMode', null, global);
goog.exportSymbol('proto.iracing.broadcast.TelemetryCommandMode', null, global);
goog.exportSymbol('proto.iracing.broadcast.TelemetryCommandRequest', null, global);
goog.exportSymbol('proto.iracing.broadcast.TelemetryCommandResponse', null, global);
goog.exportSymbol('proto.iracing.broadcast.VideoCaptureMode', null, global);
goog.exportSymbol('proto.iracing.broadcast.VideoCaptureRequest', null, global);
goog.exportSymbol('proto.iracing.broadcast.VideoCaptureResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.CameraSwitchPositionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.CameraSwitchPositionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.CameraSwitchPositionRequest.displayName = 'proto.iracing.broadcast.CameraSwitchPositionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.CameraSwitchPositionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.CameraSwitchPositionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.CameraSwitchPositionResponse.displayName = 'proto.iracing.broadcast.CameraSwitchPositionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.CameraSwitchNumberRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.CameraSwitchNumberRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.CameraSwitchNumberRequest.displayName = 'proto.iracing.broadcast.CameraSwitchNumberRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.CameraSwitchNumberResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.CameraSwitchNumberResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.CameraSwitchNumberResponse.displayName = 'proto.iracing.broadcast.CameraSwitchNumberResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.CameraSetStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.CameraSetStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.CameraSetStateRequest.displayName = 'proto.iracing.broadcast.CameraSetStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.CameraSetStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.CameraSetStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.CameraSetStateResponse.displayName = 'proto.iracing.broadcast.CameraSetStateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.ReplaySetPlaySpeedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.ReplaySetPlaySpeedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.ReplaySetPlaySpeedRequest.displayName = 'proto.iracing.broadcast.ReplaySetPlaySpeedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.ReplaySetPlaySpeedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.ReplaySetPlaySpeedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.ReplaySetPlaySpeedResponse.displayName = 'proto.iracing.broadcast.ReplaySetPlaySpeedResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.ReplaySetPlayPositionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.ReplaySetPlayPositionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.ReplaySetPlayPositionRequest.displayName = 'proto.iracing.broadcast.ReplaySetPlayPositionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.ReplaySetPlayPositionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.ReplaySetPlayPositionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.ReplaySetPlayPositionResponse.displayName = 'proto.iracing.broadcast.ReplaySetPlayPositionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.ReplaySearchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.ReplaySearchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.ReplaySearchRequest.displayName = 'proto.iracing.broadcast.ReplaySearchRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.ReplaySearchResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.ReplaySearchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.ReplaySearchResponse.displayName = 'proto.iracing.broadcast.ReplaySearchResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.ReplaySetStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.ReplaySetStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.ReplaySetStateRequest.displayName = 'proto.iracing.broadcast.ReplaySetStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.ReplaySetStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.ReplaySetStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.ReplaySetStateResponse.displayName = 'proto.iracing.broadcast.ReplaySetStateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.ReloadTexturesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.ReloadTexturesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.ReloadTexturesRequest.displayName = 'proto.iracing.broadcast.ReloadTexturesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.ReloadTexturesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.ReloadTexturesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.ReloadTexturesResponse.displayName = 'proto.iracing.broadcast.ReloadTexturesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.ChatCommandRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.ChatCommandRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.ChatCommandRequest.displayName = 'proto.iracing.broadcast.ChatCommandRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.ChatCommandResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.ChatCommandResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.ChatCommandResponse.displayName = 'proto.iracing.broadcast.ChatCommandResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.PitCommandRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.PitCommandRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.PitCommandRequest.displayName = 'proto.iracing.broadcast.PitCommandRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.PitCommandResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.PitCommandResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.PitCommandResponse.displayName = 'proto.iracing.broadcast.PitCommandResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.TelemetryCommandRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.TelemetryCommandRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.TelemetryCommandRequest.displayName = 'proto.iracing.broadcast.TelemetryCommandRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.TelemetryCommandResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.TelemetryCommandResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.TelemetryCommandResponse.displayName = 'proto.iracing.broadcast.TelemetryCommandResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.ForceFeedbackCommandRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.ForceFeedbackCommandRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.ForceFeedbackCommandRequest.displayName = 'proto.iracing.broadcast.ForceFeedbackCommandRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.ForceFeedbackCommandResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.ForceFeedbackCommandResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.ForceFeedbackCommandResponse.displayName = 'proto.iracing.broadcast.ForceFeedbackCommandResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.ReplaySearchSessionTimeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.ReplaySearchSessionTimeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.ReplaySearchSessionTimeRequest.displayName = 'proto.iracing.broadcast.ReplaySearchSessionTimeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.ReplaySearchSessionTimeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.ReplaySearchSessionTimeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.ReplaySearchSessionTimeResponse.displayName = 'proto.iracing.broadcast.ReplaySearchSessionTimeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.VideoCaptureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.VideoCaptureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.VideoCaptureRequest.displayName = 'proto.iracing.broadcast.VideoCaptureRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.VideoCaptureResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.VideoCaptureResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.VideoCaptureResponse.displayName = 'proto.iracing.broadcast.VideoCaptureResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.CameraDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iracing.broadcast.CameraDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.CameraDetail.displayName = 'proto.iracing.broadcast.CameraDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.CameraGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.iracing.broadcast.CameraGroup.repeatedFields_, null);
};
goog.inherits(proto.iracing.broadcast.CameraGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.CameraGroup.displayName = 'proto.iracing.broadcast.CameraGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iracing.broadcast.GetAvailableCamerasResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.iracing.broadcast.GetAvailableCamerasResponse.repeatedFields_, null);
};
goog.inherits(proto.iracing.broadcast.GetAvailableCamerasResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iracing.broadcast.GetAvailableCamerasResponse.displayName = 'proto.iracing.broadcast.GetAvailableCamerasResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.CameraSwitchPositionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.CameraSwitchPositionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.CameraSwitchPositionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.CameraSwitchPositionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
position: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
group: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
camera: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.CameraSwitchPositionRequest}
 */
proto.iracing.broadcast.CameraSwitchPositionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.CameraSwitchPositionRequest;
  return proto.iracing.broadcast.CameraSwitchPositionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.CameraSwitchPositionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.CameraSwitchPositionRequest}
 */
proto.iracing.broadcast.CameraSwitchPositionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPosition(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroup(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCamera(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.CameraSwitchPositionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.CameraSwitchPositionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.CameraSwitchPositionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.CameraSwitchPositionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 position = 1;
 * @return {number}
 */
proto.iracing.broadcast.CameraSwitchPositionRequest.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.CameraSwitchPositionRequest} returns this
 */
proto.iracing.broadcast.CameraSwitchPositionRequest.prototype.setPosition = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.CameraSwitchPositionRequest} returns this
 */
proto.iracing.broadcast.CameraSwitchPositionRequest.prototype.clearPosition = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.CameraSwitchPositionRequest.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 group = 2;
 * @return {number}
 */
proto.iracing.broadcast.CameraSwitchPositionRequest.prototype.getGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.CameraSwitchPositionRequest} returns this
 */
proto.iracing.broadcast.CameraSwitchPositionRequest.prototype.setGroup = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.CameraSwitchPositionRequest} returns this
 */
proto.iracing.broadcast.CameraSwitchPositionRequest.prototype.clearGroup = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.CameraSwitchPositionRequest.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 camera = 3;
 * @return {number}
 */
proto.iracing.broadcast.CameraSwitchPositionRequest.prototype.getCamera = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.CameraSwitchPositionRequest} returns this
 */
proto.iracing.broadcast.CameraSwitchPositionRequest.prototype.setCamera = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.CameraSwitchPositionRequest} returns this
 */
proto.iracing.broadcast.CameraSwitchPositionRequest.prototype.clearCamera = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.CameraSwitchPositionRequest.prototype.hasCamera = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.CameraSwitchPositionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.CameraSwitchPositionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.CameraSwitchPositionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.CameraSwitchPositionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
carIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
group: jspb.Message.getFieldWithDefault(msg, 2, 0),
camera: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.CameraSwitchPositionResponse}
 */
proto.iracing.broadcast.CameraSwitchPositionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.CameraSwitchPositionResponse;
  return proto.iracing.broadcast.CameraSwitchPositionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.CameraSwitchPositionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.CameraSwitchPositionResponse}
 */
proto.iracing.broadcast.CameraSwitchPositionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCarIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroup(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCamera(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.CameraSwitchPositionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.CameraSwitchPositionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.CameraSwitchPositionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.CameraSwitchPositionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCarIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGroup();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getCamera();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 car_index = 1;
 * @return {number}
 */
proto.iracing.broadcast.CameraSwitchPositionResponse.prototype.getCarIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.CameraSwitchPositionResponse} returns this
 */
proto.iracing.broadcast.CameraSwitchPositionResponse.prototype.setCarIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 group = 2;
 * @return {number}
 */
proto.iracing.broadcast.CameraSwitchPositionResponse.prototype.getGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.CameraSwitchPositionResponse} returns this
 */
proto.iracing.broadcast.CameraSwitchPositionResponse.prototype.setGroup = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 camera = 3;
 * @return {number}
 */
proto.iracing.broadcast.CameraSwitchPositionResponse.prototype.getCamera = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.CameraSwitchPositionResponse} returns this
 */
proto.iracing.broadcast.CameraSwitchPositionResponse.prototype.setCamera = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.CameraSwitchNumberRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.CameraSwitchNumberRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.CameraSwitchNumberRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.CameraSwitchNumberRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
carNumber: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
group: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
camera: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.CameraSwitchNumberRequest}
 */
proto.iracing.broadcast.CameraSwitchNumberRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.CameraSwitchNumberRequest;
  return proto.iracing.broadcast.CameraSwitchNumberRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.CameraSwitchNumberRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.CameraSwitchNumberRequest}
 */
proto.iracing.broadcast.CameraSwitchNumberRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCarNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroup(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCamera(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.CameraSwitchNumberRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.CameraSwitchNumberRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.CameraSwitchNumberRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.CameraSwitchNumberRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string car_number = 1;
 * @return {string}
 */
proto.iracing.broadcast.CameraSwitchNumberRequest.prototype.getCarNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.iracing.broadcast.CameraSwitchNumberRequest} returns this
 */
proto.iracing.broadcast.CameraSwitchNumberRequest.prototype.setCarNumber = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.CameraSwitchNumberRequest} returns this
 */
proto.iracing.broadcast.CameraSwitchNumberRequest.prototype.clearCarNumber = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.CameraSwitchNumberRequest.prototype.hasCarNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 group = 2;
 * @return {number}
 */
proto.iracing.broadcast.CameraSwitchNumberRequest.prototype.getGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.CameraSwitchNumberRequest} returns this
 */
proto.iracing.broadcast.CameraSwitchNumberRequest.prototype.setGroup = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.CameraSwitchNumberRequest} returns this
 */
proto.iracing.broadcast.CameraSwitchNumberRequest.prototype.clearGroup = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.CameraSwitchNumberRequest.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 camera = 3;
 * @return {number}
 */
proto.iracing.broadcast.CameraSwitchNumberRequest.prototype.getCamera = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.CameraSwitchNumberRequest} returns this
 */
proto.iracing.broadcast.CameraSwitchNumberRequest.prototype.setCamera = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.CameraSwitchNumberRequest} returns this
 */
proto.iracing.broadcast.CameraSwitchNumberRequest.prototype.clearCamera = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.CameraSwitchNumberRequest.prototype.hasCamera = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.CameraSwitchNumberResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.CameraSwitchNumberResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.CameraSwitchNumberResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.CameraSwitchNumberResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
carIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
group: jspb.Message.getFieldWithDefault(msg, 2, 0),
camera: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.CameraSwitchNumberResponse}
 */
proto.iracing.broadcast.CameraSwitchNumberResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.CameraSwitchNumberResponse;
  return proto.iracing.broadcast.CameraSwitchNumberResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.CameraSwitchNumberResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.CameraSwitchNumberResponse}
 */
proto.iracing.broadcast.CameraSwitchNumberResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCarIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroup(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCamera(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.CameraSwitchNumberResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.CameraSwitchNumberResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.CameraSwitchNumberResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.CameraSwitchNumberResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCarIndex();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getGroup();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getCamera();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 car_index = 1;
 * @return {number}
 */
proto.iracing.broadcast.CameraSwitchNumberResponse.prototype.getCarIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.CameraSwitchNumberResponse} returns this
 */
proto.iracing.broadcast.CameraSwitchNumberResponse.prototype.setCarIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 group = 2;
 * @return {number}
 */
proto.iracing.broadcast.CameraSwitchNumberResponse.prototype.getGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.CameraSwitchNumberResponse} returns this
 */
proto.iracing.broadcast.CameraSwitchNumberResponse.prototype.setGroup = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 camera = 3;
 * @return {number}
 */
proto.iracing.broadcast.CameraSwitchNumberResponse.prototype.getCamera = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.CameraSwitchNumberResponse} returns this
 */
proto.iracing.broadcast.CameraSwitchNumberResponse.prototype.setCamera = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.CameraSetStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.CameraSetStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.CameraSetStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.CameraSetStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
state: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.CameraSetStateRequest}
 */
proto.iracing.broadcast.CameraSetStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.CameraSetStateRequest;
  return proto.iracing.broadcast.CameraSetStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.CameraSetStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.CameraSetStateRequest}
 */
proto.iracing.broadcast.CameraSetStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.iracing.broadcast.CameraState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.CameraSetStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.CameraSetStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.CameraSetStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.CameraSetStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.iracing.broadcast.CameraState} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional CameraState state = 1;
 * @return {!proto.iracing.broadcast.CameraState}
 */
proto.iracing.broadcast.CameraSetStateRequest.prototype.getState = function() {
  return /** @type {!proto.iracing.broadcast.CameraState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.iracing.broadcast.CameraState} value
 * @return {!proto.iracing.broadcast.CameraSetStateRequest} returns this
 */
proto.iracing.broadcast.CameraSetStateRequest.prototype.setState = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.CameraSetStateRequest} returns this
 */
proto.iracing.broadcast.CameraSetStateRequest.prototype.clearState = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.CameraSetStateRequest.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.CameraSetStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.CameraSetStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.CameraSetStateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.CameraSetStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.CameraSetStateResponse}
 */
proto.iracing.broadcast.CameraSetStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.CameraSetStateResponse;
  return proto.iracing.broadcast.CameraSetStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.CameraSetStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.CameraSetStateResponse}
 */
proto.iracing.broadcast.CameraSetStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.iracing.broadcast.CameraState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.CameraSetStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.CameraSetStateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.CameraSetStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.CameraSetStateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional CameraState state = 1;
 * @return {!proto.iracing.broadcast.CameraState}
 */
proto.iracing.broadcast.CameraSetStateResponse.prototype.getState = function() {
  return /** @type {!proto.iracing.broadcast.CameraState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.iracing.broadcast.CameraState} value
 * @return {!proto.iracing.broadcast.CameraSetStateResponse} returns this
 */
proto.iracing.broadcast.CameraSetStateResponse.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.ReplaySetPlaySpeedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.ReplaySetPlaySpeedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.ReplaySetPlaySpeedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySetPlaySpeedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
speed: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
isSlowMotion: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.ReplaySetPlaySpeedRequest}
 */
proto.iracing.broadcast.ReplaySetPlaySpeedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.ReplaySetPlaySpeedRequest;
  return proto.iracing.broadcast.ReplaySetPlaySpeedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.ReplaySetPlaySpeedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.ReplaySetPlaySpeedRequest}
 */
proto.iracing.broadcast.ReplaySetPlaySpeedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpeed(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSlowMotion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.ReplaySetPlaySpeedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.ReplaySetPlaySpeedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.ReplaySetPlaySpeedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySetPlaySpeedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional uint32 speed = 1;
 * @return {number}
 */
proto.iracing.broadcast.ReplaySetPlaySpeedRequest.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.ReplaySetPlaySpeedRequest} returns this
 */
proto.iracing.broadcast.ReplaySetPlaySpeedRequest.prototype.setSpeed = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.ReplaySetPlaySpeedRequest} returns this
 */
proto.iracing.broadcast.ReplaySetPlaySpeedRequest.prototype.clearSpeed = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.ReplaySetPlaySpeedRequest.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool is_slow_motion = 2;
 * @return {boolean}
 */
proto.iracing.broadcast.ReplaySetPlaySpeedRequest.prototype.getIsSlowMotion = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.iracing.broadcast.ReplaySetPlaySpeedRequest} returns this
 */
proto.iracing.broadcast.ReplaySetPlaySpeedRequest.prototype.setIsSlowMotion = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.ReplaySetPlaySpeedRequest} returns this
 */
proto.iracing.broadcast.ReplaySetPlaySpeedRequest.prototype.clearIsSlowMotion = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.ReplaySetPlaySpeedRequest.prototype.hasIsSlowMotion = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.ReplaySetPlaySpeedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.ReplaySetPlaySpeedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.ReplaySetPlaySpeedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySetPlaySpeedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
speed: jspb.Message.getFieldWithDefault(msg, 1, 0),
isSlowMotion: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.ReplaySetPlaySpeedResponse}
 */
proto.iracing.broadcast.ReplaySetPlaySpeedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.ReplaySetPlaySpeedResponse;
  return proto.iracing.broadcast.ReplaySetPlaySpeedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.ReplaySetPlaySpeedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.ReplaySetPlaySpeedResponse}
 */
proto.iracing.broadcast.ReplaySetPlaySpeedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpeed(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSlowMotion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.ReplaySetPlaySpeedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.ReplaySetPlaySpeedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.ReplaySetPlaySpeedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySetPlaySpeedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpeed();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getIsSlowMotion();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional uint32 speed = 1;
 * @return {number}
 */
proto.iracing.broadcast.ReplaySetPlaySpeedResponse.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.ReplaySetPlaySpeedResponse} returns this
 */
proto.iracing.broadcast.ReplaySetPlaySpeedResponse.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool is_slow_motion = 2;
 * @return {boolean}
 */
proto.iracing.broadcast.ReplaySetPlaySpeedResponse.prototype.getIsSlowMotion = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.iracing.broadcast.ReplaySetPlaySpeedResponse} returns this
 */
proto.iracing.broadcast.ReplaySetPlaySpeedResponse.prototype.setIsSlowMotion = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.ReplaySetPlayPositionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.ReplaySetPlayPositionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.ReplaySetPlayPositionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySetPlayPositionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
mode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
frame: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.ReplaySetPlayPositionRequest}
 */
proto.iracing.broadcast.ReplaySetPlayPositionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.ReplaySetPlayPositionRequest;
  return proto.iracing.broadcast.ReplaySetPlayPositionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.ReplaySetPlayPositionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.ReplaySetPlayPositionRequest}
 */
proto.iracing.broadcast.ReplaySetPlayPositionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.iracing.broadcast.ReplayPositionMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.ReplaySetPlayPositionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.ReplaySetPlayPositionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.ReplaySetPlayPositionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySetPlayPositionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.iracing.broadcast.ReplayPositionMode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional ReplayPositionMode mode = 1;
 * @return {!proto.iracing.broadcast.ReplayPositionMode}
 */
proto.iracing.broadcast.ReplaySetPlayPositionRequest.prototype.getMode = function() {
  return /** @type {!proto.iracing.broadcast.ReplayPositionMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.iracing.broadcast.ReplayPositionMode} value
 * @return {!proto.iracing.broadcast.ReplaySetPlayPositionRequest} returns this
 */
proto.iracing.broadcast.ReplaySetPlayPositionRequest.prototype.setMode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.ReplaySetPlayPositionRequest} returns this
 */
proto.iracing.broadcast.ReplaySetPlayPositionRequest.prototype.clearMode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.ReplaySetPlayPositionRequest.prototype.hasMode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 frame = 2;
 * @return {number}
 */
proto.iracing.broadcast.ReplaySetPlayPositionRequest.prototype.getFrame = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.ReplaySetPlayPositionRequest} returns this
 */
proto.iracing.broadcast.ReplaySetPlayPositionRequest.prototype.setFrame = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.ReplaySetPlayPositionRequest} returns this
 */
proto.iracing.broadcast.ReplaySetPlayPositionRequest.prototype.clearFrame = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.ReplaySetPlayPositionRequest.prototype.hasFrame = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.ReplaySetPlayPositionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.ReplaySetPlayPositionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.ReplaySetPlayPositionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySetPlayPositionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
frame: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.ReplaySetPlayPositionResponse}
 */
proto.iracing.broadcast.ReplaySetPlayPositionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.ReplaySetPlayPositionResponse;
  return proto.iracing.broadcast.ReplaySetPlayPositionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.ReplaySetPlayPositionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.ReplaySetPlayPositionResponse}
 */
proto.iracing.broadcast.ReplaySetPlayPositionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.ReplaySetPlayPositionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.ReplaySetPlayPositionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.ReplaySetPlayPositionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySetPlayPositionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrame();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 frame = 1;
 * @return {number}
 */
proto.iracing.broadcast.ReplaySetPlayPositionResponse.prototype.getFrame = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.ReplaySetPlayPositionResponse} returns this
 */
proto.iracing.broadcast.ReplaySetPlayPositionResponse.prototype.setFrame = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.ReplaySearchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.ReplaySearchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.ReplaySearchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySearchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
mode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.ReplaySearchRequest}
 */
proto.iracing.broadcast.ReplaySearchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.ReplaySearchRequest;
  return proto.iracing.broadcast.ReplaySearchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.ReplaySearchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.ReplaySearchRequest}
 */
proto.iracing.broadcast.ReplaySearchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.iracing.broadcast.ReplaySearchMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.ReplaySearchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.ReplaySearchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.ReplaySearchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySearchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.iracing.broadcast.ReplaySearchMode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ReplaySearchMode mode = 1;
 * @return {!proto.iracing.broadcast.ReplaySearchMode}
 */
proto.iracing.broadcast.ReplaySearchRequest.prototype.getMode = function() {
  return /** @type {!proto.iracing.broadcast.ReplaySearchMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.iracing.broadcast.ReplaySearchMode} value
 * @return {!proto.iracing.broadcast.ReplaySearchRequest} returns this
 */
proto.iracing.broadcast.ReplaySearchRequest.prototype.setMode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.ReplaySearchRequest} returns this
 */
proto.iracing.broadcast.ReplaySearchRequest.prototype.clearMode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.ReplaySearchRequest.prototype.hasMode = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.ReplaySearchResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.ReplaySearchResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.ReplaySearchResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySearchResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
frame: jspb.Message.getFieldWithDefault(msg, 1, 0),
sessionNumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
sessionTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.ReplaySearchResponse}
 */
proto.iracing.broadcast.ReplaySearchResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.ReplaySearchResponse;
  return proto.iracing.broadcast.ReplaySearchResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.ReplaySearchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.ReplaySearchResponse}
 */
proto.iracing.broadcast.ReplaySearchResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrame(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSessionNumber(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSessionTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.ReplaySearchResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.ReplaySearchResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.ReplaySearchResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySearchResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrame();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSessionNumber();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSessionTime();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional uint32 frame = 1;
 * @return {number}
 */
proto.iracing.broadcast.ReplaySearchResponse.prototype.getFrame = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.ReplaySearchResponse} returns this
 */
proto.iracing.broadcast.ReplaySearchResponse.prototype.setFrame = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 session_number = 2;
 * @return {number}
 */
proto.iracing.broadcast.ReplaySearchResponse.prototype.getSessionNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.ReplaySearchResponse} returns this
 */
proto.iracing.broadcast.ReplaySearchResponse.prototype.setSessionNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float session_time = 3;
 * @return {number}
 */
proto.iracing.broadcast.ReplaySearchResponse.prototype.getSessionTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.ReplaySearchResponse} returns this
 */
proto.iracing.broadcast.ReplaySearchResponse.prototype.setSessionTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.ReplaySetStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.ReplaySetStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.ReplaySetStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySetStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
state: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.ReplaySetStateRequest}
 */
proto.iracing.broadcast.ReplaySetStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.ReplaySetStateRequest;
  return proto.iracing.broadcast.ReplaySetStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.ReplaySetStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.ReplaySetStateRequest}
 */
proto.iracing.broadcast.ReplaySetStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.iracing.broadcast.ReplayStateMode} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.ReplaySetStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.ReplaySetStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.ReplaySetStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySetStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.iracing.broadcast.ReplayStateMode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional ReplayStateMode state = 1;
 * @return {!proto.iracing.broadcast.ReplayStateMode}
 */
proto.iracing.broadcast.ReplaySetStateRequest.prototype.getState = function() {
  return /** @type {!proto.iracing.broadcast.ReplayStateMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.iracing.broadcast.ReplayStateMode} value
 * @return {!proto.iracing.broadcast.ReplaySetStateRequest} returns this
 */
proto.iracing.broadcast.ReplaySetStateRequest.prototype.setState = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.ReplaySetStateRequest} returns this
 */
proto.iracing.broadcast.ReplaySetStateRequest.prototype.clearState = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.ReplaySetStateRequest.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.ReplaySetStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.ReplaySetStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.ReplaySetStateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySetStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.ReplaySetStateResponse}
 */
proto.iracing.broadcast.ReplaySetStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.ReplaySetStateResponse;
  return proto.iracing.broadcast.ReplaySetStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.ReplaySetStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.ReplaySetStateResponse}
 */
proto.iracing.broadcast.ReplaySetStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.ReplaySetStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.ReplaySetStateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.ReplaySetStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySetStateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.ReloadTexturesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.ReloadTexturesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.ReloadTexturesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReloadTexturesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
carIdx: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.ReloadTexturesRequest}
 */
proto.iracing.broadcast.ReloadTexturesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.ReloadTexturesRequest;
  return proto.iracing.broadcast.ReloadTexturesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.ReloadTexturesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.ReloadTexturesRequest}
 */
proto.iracing.broadcast.ReloadTexturesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCarIdx(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.ReloadTexturesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.ReloadTexturesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.ReloadTexturesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReloadTexturesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 car_idx = 1;
 * @return {number}
 */
proto.iracing.broadcast.ReloadTexturesRequest.prototype.getCarIdx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.ReloadTexturesRequest} returns this
 */
proto.iracing.broadcast.ReloadTexturesRequest.prototype.setCarIdx = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.ReloadTexturesRequest} returns this
 */
proto.iracing.broadcast.ReloadTexturesRequest.prototype.clearCarIdx = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.ReloadTexturesRequest.prototype.hasCarIdx = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.ReloadTexturesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.ReloadTexturesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.ReloadTexturesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReloadTexturesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.ReloadTexturesResponse}
 */
proto.iracing.broadcast.ReloadTexturesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.ReloadTexturesResponse;
  return proto.iracing.broadcast.ReloadTexturesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.ReloadTexturesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.ReloadTexturesResponse}
 */
proto.iracing.broadcast.ReloadTexturesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.ReloadTexturesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.ReloadTexturesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.ReloadTexturesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReloadTexturesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.ChatCommandRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.ChatCommandRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.ChatCommandRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ChatCommandRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
mode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
macro: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.ChatCommandRequest}
 */
proto.iracing.broadcast.ChatCommandRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.ChatCommandRequest;
  return proto.iracing.broadcast.ChatCommandRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.ChatCommandRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.ChatCommandRequest}
 */
proto.iracing.broadcast.ChatCommandRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.iracing.broadcast.ChatCommandMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMacro(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.ChatCommandRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.ChatCommandRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.ChatCommandRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ChatCommandRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.iracing.broadcast.ChatCommandMode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional ChatCommandMode mode = 1;
 * @return {!proto.iracing.broadcast.ChatCommandMode}
 */
proto.iracing.broadcast.ChatCommandRequest.prototype.getMode = function() {
  return /** @type {!proto.iracing.broadcast.ChatCommandMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.iracing.broadcast.ChatCommandMode} value
 * @return {!proto.iracing.broadcast.ChatCommandRequest} returns this
 */
proto.iracing.broadcast.ChatCommandRequest.prototype.setMode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.ChatCommandRequest} returns this
 */
proto.iracing.broadcast.ChatCommandRequest.prototype.clearMode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.ChatCommandRequest.prototype.hasMode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 macro = 2;
 * @return {number}
 */
proto.iracing.broadcast.ChatCommandRequest.prototype.getMacro = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.ChatCommandRequest} returns this
 */
proto.iracing.broadcast.ChatCommandRequest.prototype.setMacro = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.ChatCommandRequest} returns this
 */
proto.iracing.broadcast.ChatCommandRequest.prototype.clearMacro = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.ChatCommandRequest.prototype.hasMacro = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.ChatCommandResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.ChatCommandResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.ChatCommandResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ChatCommandResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.ChatCommandResponse}
 */
proto.iracing.broadcast.ChatCommandResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.ChatCommandResponse;
  return proto.iracing.broadcast.ChatCommandResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.ChatCommandResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.ChatCommandResponse}
 */
proto.iracing.broadcast.ChatCommandResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.ChatCommandResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.ChatCommandResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.ChatCommandResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ChatCommandResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.PitCommandRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.PitCommandRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.PitCommandRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.PitCommandRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
mode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
value: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.PitCommandRequest}
 */
proto.iracing.broadcast.PitCommandRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.PitCommandRequest;
  return proto.iracing.broadcast.PitCommandRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.PitCommandRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.PitCommandRequest}
 */
proto.iracing.broadcast.PitCommandRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.iracing.broadcast.PitCommandMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.PitCommandRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.PitCommandRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.PitCommandRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.PitCommandRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.iracing.broadcast.PitCommandMode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional PitCommandMode mode = 1;
 * @return {!proto.iracing.broadcast.PitCommandMode}
 */
proto.iracing.broadcast.PitCommandRequest.prototype.getMode = function() {
  return /** @type {!proto.iracing.broadcast.PitCommandMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.iracing.broadcast.PitCommandMode} value
 * @return {!proto.iracing.broadcast.PitCommandRequest} returns this
 */
proto.iracing.broadcast.PitCommandRequest.prototype.setMode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.PitCommandRequest} returns this
 */
proto.iracing.broadcast.PitCommandRequest.prototype.clearMode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.PitCommandRequest.prototype.hasMode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float value = 2;
 * @return {number}
 */
proto.iracing.broadcast.PitCommandRequest.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.PitCommandRequest} returns this
 */
proto.iracing.broadcast.PitCommandRequest.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.PitCommandRequest} returns this
 */
proto.iracing.broadcast.PitCommandRequest.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.PitCommandRequest.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.PitCommandResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.PitCommandResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.PitCommandResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.PitCommandResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
serviceFlags: jspb.Message.getFieldWithDefault(msg, 1, 0),
fuel: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
lfPressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
rfPressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
lrPressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
rrPressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
tireCompound: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.PitCommandResponse}
 */
proto.iracing.broadcast.PitCommandResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.PitCommandResponse;
  return proto.iracing.broadcast.PitCommandResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.PitCommandResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.PitCommandResponse}
 */
proto.iracing.broadcast.PitCommandResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServiceFlags(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFuel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLfPressure(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRfPressure(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLrPressure(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRrPressure(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTireCompound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.PitCommandResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.PitCommandResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.PitCommandResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.PitCommandResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceFlags();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getFuel();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getLfPressure();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getRfPressure();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getLrPressure();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getRrPressure();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getTireCompound();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional uint32 service_flags = 1;
 * @return {number}
 */
proto.iracing.broadcast.PitCommandResponse.prototype.getServiceFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.PitCommandResponse} returns this
 */
proto.iracing.broadcast.PitCommandResponse.prototype.setServiceFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float fuel = 2;
 * @return {number}
 */
proto.iracing.broadcast.PitCommandResponse.prototype.getFuel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.PitCommandResponse} returns this
 */
proto.iracing.broadcast.PitCommandResponse.prototype.setFuel = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float lf_pressure = 3;
 * @return {number}
 */
proto.iracing.broadcast.PitCommandResponse.prototype.getLfPressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.PitCommandResponse} returns this
 */
proto.iracing.broadcast.PitCommandResponse.prototype.setLfPressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float rf_pressure = 4;
 * @return {number}
 */
proto.iracing.broadcast.PitCommandResponse.prototype.getRfPressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.PitCommandResponse} returns this
 */
proto.iracing.broadcast.PitCommandResponse.prototype.setRfPressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float lr_pressure = 5;
 * @return {number}
 */
proto.iracing.broadcast.PitCommandResponse.prototype.getLrPressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.PitCommandResponse} returns this
 */
proto.iracing.broadcast.PitCommandResponse.prototype.setLrPressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float rr_pressure = 6;
 * @return {number}
 */
proto.iracing.broadcast.PitCommandResponse.prototype.getRrPressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.PitCommandResponse} returns this
 */
proto.iracing.broadcast.PitCommandResponse.prototype.setRrPressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional uint32 tire_compound = 7;
 * @return {number}
 */
proto.iracing.broadcast.PitCommandResponse.prototype.getTireCompound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.PitCommandResponse} returns this
 */
proto.iracing.broadcast.PitCommandResponse.prototype.setTireCompound = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.TelemetryCommandRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.TelemetryCommandRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.TelemetryCommandRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.TelemetryCommandRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
mode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.TelemetryCommandRequest}
 */
proto.iracing.broadcast.TelemetryCommandRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.TelemetryCommandRequest;
  return proto.iracing.broadcast.TelemetryCommandRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.TelemetryCommandRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.TelemetryCommandRequest}
 */
proto.iracing.broadcast.TelemetryCommandRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.iracing.broadcast.TelemetryCommandMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.TelemetryCommandRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.TelemetryCommandRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.TelemetryCommandRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.TelemetryCommandRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.iracing.broadcast.TelemetryCommandMode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional TelemetryCommandMode mode = 1;
 * @return {!proto.iracing.broadcast.TelemetryCommandMode}
 */
proto.iracing.broadcast.TelemetryCommandRequest.prototype.getMode = function() {
  return /** @type {!proto.iracing.broadcast.TelemetryCommandMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.iracing.broadcast.TelemetryCommandMode} value
 * @return {!proto.iracing.broadcast.TelemetryCommandRequest} returns this
 */
proto.iracing.broadcast.TelemetryCommandRequest.prototype.setMode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.TelemetryCommandRequest} returns this
 */
proto.iracing.broadcast.TelemetryCommandRequest.prototype.clearMode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.TelemetryCommandRequest.prototype.hasMode = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.TelemetryCommandResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.TelemetryCommandResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.TelemetryCommandResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.TelemetryCommandResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
isDiskLoggingEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
isDiskLoggingActive: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.TelemetryCommandResponse}
 */
proto.iracing.broadcast.TelemetryCommandResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.TelemetryCommandResponse;
  return proto.iracing.broadcast.TelemetryCommandResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.TelemetryCommandResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.TelemetryCommandResponse}
 */
proto.iracing.broadcast.TelemetryCommandResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDiskLoggingEnabled(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDiskLoggingActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.TelemetryCommandResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.TelemetryCommandResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.TelemetryCommandResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.TelemetryCommandResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsDiskLoggingEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getIsDiskLoggingActive();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bool is_disk_logging_enabled = 1;
 * @return {boolean}
 */
proto.iracing.broadcast.TelemetryCommandResponse.prototype.getIsDiskLoggingEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.iracing.broadcast.TelemetryCommandResponse} returns this
 */
proto.iracing.broadcast.TelemetryCommandResponse.prototype.setIsDiskLoggingEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool is_disk_logging_active = 2;
 * @return {boolean}
 */
proto.iracing.broadcast.TelemetryCommandResponse.prototype.getIsDiskLoggingActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.iracing.broadcast.TelemetryCommandResponse} returns this
 */
proto.iracing.broadcast.TelemetryCommandResponse.prototype.setIsDiskLoggingActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.ForceFeedbackCommandRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.ForceFeedbackCommandRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.ForceFeedbackCommandRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ForceFeedbackCommandRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
mode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
value: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.ForceFeedbackCommandRequest}
 */
proto.iracing.broadcast.ForceFeedbackCommandRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.ForceFeedbackCommandRequest;
  return proto.iracing.broadcast.ForceFeedbackCommandRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.ForceFeedbackCommandRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.ForceFeedbackCommandRequest}
 */
proto.iracing.broadcast.ForceFeedbackCommandRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.iracing.broadcast.ForceFeedbackCommandMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.ForceFeedbackCommandRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.ForceFeedbackCommandRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.ForceFeedbackCommandRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ForceFeedbackCommandRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.iracing.broadcast.ForceFeedbackCommandMode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional ForceFeedbackCommandMode mode = 1;
 * @return {!proto.iracing.broadcast.ForceFeedbackCommandMode}
 */
proto.iracing.broadcast.ForceFeedbackCommandRequest.prototype.getMode = function() {
  return /** @type {!proto.iracing.broadcast.ForceFeedbackCommandMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.iracing.broadcast.ForceFeedbackCommandMode} value
 * @return {!proto.iracing.broadcast.ForceFeedbackCommandRequest} returns this
 */
proto.iracing.broadcast.ForceFeedbackCommandRequest.prototype.setMode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.ForceFeedbackCommandRequest} returns this
 */
proto.iracing.broadcast.ForceFeedbackCommandRequest.prototype.clearMode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.ForceFeedbackCommandRequest.prototype.hasMode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float value = 2;
 * @return {number}
 */
proto.iracing.broadcast.ForceFeedbackCommandRequest.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.ForceFeedbackCommandRequest} returns this
 */
proto.iracing.broadcast.ForceFeedbackCommandRequest.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.ForceFeedbackCommandRequest} returns this
 */
proto.iracing.broadcast.ForceFeedbackCommandRequest.prototype.clearValue = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.ForceFeedbackCommandRequest.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.ForceFeedbackCommandResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.ForceFeedbackCommandResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.ForceFeedbackCommandResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ForceFeedbackCommandResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
maxForce: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.ForceFeedbackCommandResponse}
 */
proto.iracing.broadcast.ForceFeedbackCommandResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.ForceFeedbackCommandResponse;
  return proto.iracing.broadcast.ForceFeedbackCommandResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.ForceFeedbackCommandResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.ForceFeedbackCommandResponse}
 */
proto.iracing.broadcast.ForceFeedbackCommandResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxForce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.ForceFeedbackCommandResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.ForceFeedbackCommandResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.ForceFeedbackCommandResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ForceFeedbackCommandResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxForce();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float max_force = 1;
 * @return {number}
 */
proto.iracing.broadcast.ForceFeedbackCommandResponse.prototype.getMaxForce = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.ForceFeedbackCommandResponse} returns this
 */
proto.iracing.broadcast.ForceFeedbackCommandResponse.prototype.setMaxForce = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.ReplaySearchSessionTimeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.ReplaySearchSessionTimeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.ReplaySearchSessionTimeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySearchSessionTimeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
sessionNumber: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
sessionTimeMs: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.ReplaySearchSessionTimeRequest}
 */
proto.iracing.broadcast.ReplaySearchSessionTimeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.ReplaySearchSessionTimeRequest;
  return proto.iracing.broadcast.ReplaySearchSessionTimeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.ReplaySearchSessionTimeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.ReplaySearchSessionTimeRequest}
 */
proto.iracing.broadcast.ReplaySearchSessionTimeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSessionNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSessionTimeMs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.ReplaySearchSessionTimeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.ReplaySearchSessionTimeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.ReplaySearchSessionTimeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySearchSessionTimeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional uint32 session_number = 1;
 * @return {number}
 */
proto.iracing.broadcast.ReplaySearchSessionTimeRequest.prototype.getSessionNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.ReplaySearchSessionTimeRequest} returns this
 */
proto.iracing.broadcast.ReplaySearchSessionTimeRequest.prototype.setSessionNumber = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.ReplaySearchSessionTimeRequest} returns this
 */
proto.iracing.broadcast.ReplaySearchSessionTimeRequest.prototype.clearSessionNumber = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.ReplaySearchSessionTimeRequest.prototype.hasSessionNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float session_time_ms = 2;
 * @return {number}
 */
proto.iracing.broadcast.ReplaySearchSessionTimeRequest.prototype.getSessionTimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.ReplaySearchSessionTimeRequest} returns this
 */
proto.iracing.broadcast.ReplaySearchSessionTimeRequest.prototype.setSessionTimeMs = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.ReplaySearchSessionTimeRequest} returns this
 */
proto.iracing.broadcast.ReplaySearchSessionTimeRequest.prototype.clearSessionTimeMs = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.ReplaySearchSessionTimeRequest.prototype.hasSessionTimeMs = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.ReplaySearchSessionTimeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.ReplaySearchSessionTimeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.ReplaySearchSessionTimeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySearchSessionTimeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.ReplaySearchSessionTimeResponse}
 */
proto.iracing.broadcast.ReplaySearchSessionTimeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.ReplaySearchSessionTimeResponse;
  return proto.iracing.broadcast.ReplaySearchSessionTimeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.ReplaySearchSessionTimeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.ReplaySearchSessionTimeResponse}
 */
proto.iracing.broadcast.ReplaySearchSessionTimeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.ReplaySearchSessionTimeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.ReplaySearchSessionTimeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.ReplaySearchSessionTimeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.ReplaySearchSessionTimeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.VideoCaptureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.VideoCaptureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.VideoCaptureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.VideoCaptureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
mode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.VideoCaptureRequest}
 */
proto.iracing.broadcast.VideoCaptureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.VideoCaptureRequest;
  return proto.iracing.broadcast.VideoCaptureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.VideoCaptureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.VideoCaptureRequest}
 */
proto.iracing.broadcast.VideoCaptureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.iracing.broadcast.VideoCaptureMode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.VideoCaptureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.VideoCaptureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.VideoCaptureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.VideoCaptureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.iracing.broadcast.VideoCaptureMode} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional VideoCaptureMode mode = 1;
 * @return {!proto.iracing.broadcast.VideoCaptureMode}
 */
proto.iracing.broadcast.VideoCaptureRequest.prototype.getMode = function() {
  return /** @type {!proto.iracing.broadcast.VideoCaptureMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.iracing.broadcast.VideoCaptureMode} value
 * @return {!proto.iracing.broadcast.VideoCaptureRequest} returns this
 */
proto.iracing.broadcast.VideoCaptureRequest.prototype.setMode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.VideoCaptureRequest} returns this
 */
proto.iracing.broadcast.VideoCaptureRequest.prototype.clearMode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.VideoCaptureRequest.prototype.hasMode = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.VideoCaptureResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.VideoCaptureResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.VideoCaptureResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.VideoCaptureResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.VideoCaptureResponse}
 */
proto.iracing.broadcast.VideoCaptureResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.VideoCaptureResponse;
  return proto.iracing.broadcast.VideoCaptureResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.VideoCaptureResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.VideoCaptureResponse}
 */
proto.iracing.broadcast.VideoCaptureResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.VideoCaptureResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.VideoCaptureResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.VideoCaptureResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.VideoCaptureResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.CameraDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.CameraDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.CameraDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.CameraDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
number: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.CameraDetail}
 */
proto.iracing.broadcast.CameraDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.CameraDetail;
  return proto.iracing.broadcast.CameraDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.CameraDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.CameraDetail}
 */
proto.iracing.broadcast.CameraDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.CameraDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.CameraDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.CameraDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.CameraDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 number = 1;
 * @return {number}
 */
proto.iracing.broadcast.CameraDetail.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.CameraDetail} returns this
 */
proto.iracing.broadcast.CameraDetail.prototype.setNumber = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.CameraDetail} returns this
 */
proto.iracing.broadcast.CameraDetail.prototype.clearNumber = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.CameraDetail.prototype.hasNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.iracing.broadcast.CameraDetail.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.iracing.broadcast.CameraDetail} returns this
 */
proto.iracing.broadcast.CameraDetail.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.iracing.broadcast.CameraDetail} returns this
 */
proto.iracing.broadcast.CameraDetail.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.iracing.broadcast.CameraDetail.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.iracing.broadcast.CameraGroup.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.CameraGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.CameraGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.CameraGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.CameraGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
number: jspb.Message.getFieldWithDefault(msg, 1, 0),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
camerasList: jspb.Message.toObjectList(msg.getCamerasList(),
    proto.iracing.broadcast.CameraDetail.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.CameraGroup}
 */
proto.iracing.broadcast.CameraGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.CameraGroup;
  return proto.iracing.broadcast.CameraGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.CameraGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.CameraGroup}
 */
proto.iracing.broadcast.CameraGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.iracing.broadcast.CameraDetail;
      reader.readMessage(value,proto.iracing.broadcast.CameraDetail.deserializeBinaryFromReader);
      msg.addCameras(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.CameraGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.CameraGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.CameraGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.CameraGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCamerasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.iracing.broadcast.CameraDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 number = 1;
 * @return {number}
 */
proto.iracing.broadcast.CameraGroup.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.CameraGroup} returns this
 */
proto.iracing.broadcast.CameraGroup.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.iracing.broadcast.CameraGroup.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.iracing.broadcast.CameraGroup} returns this
 */
proto.iracing.broadcast.CameraGroup.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated CameraDetail cameras = 3;
 * @return {!Array<!proto.iracing.broadcast.CameraDetail>}
 */
proto.iracing.broadcast.CameraGroup.prototype.getCamerasList = function() {
  return /** @type{!Array<!proto.iracing.broadcast.CameraDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.iracing.broadcast.CameraDetail, 3));
};


/**
 * @param {!Array<!proto.iracing.broadcast.CameraDetail>} value
 * @return {!proto.iracing.broadcast.CameraGroup} returns this
*/
proto.iracing.broadcast.CameraGroup.prototype.setCamerasList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.iracing.broadcast.CameraDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.iracing.broadcast.CameraDetail}
 */
proto.iracing.broadcast.CameraGroup.prototype.addCameras = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.iracing.broadcast.CameraDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.iracing.broadcast.CameraGroup} returns this
 */
proto.iracing.broadcast.CameraGroup.prototype.clearCamerasList = function() {
  return this.setCamerasList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.iracing.broadcast.GetAvailableCamerasResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iracing.broadcast.GetAvailableCamerasResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.iracing.broadcast.GetAvailableCamerasResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iracing.broadcast.GetAvailableCamerasResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.GetAvailableCamerasResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
cameraGroupsList: jspb.Message.toObjectList(msg.getCameraGroupsList(),
    proto.iracing.broadcast.CameraGroup.toObject, includeInstance),
carIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
group: jspb.Message.getFieldWithDefault(msg, 3, 0),
camera: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iracing.broadcast.GetAvailableCamerasResponse}
 */
proto.iracing.broadcast.GetAvailableCamerasResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iracing.broadcast.GetAvailableCamerasResponse;
  return proto.iracing.broadcast.GetAvailableCamerasResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iracing.broadcast.GetAvailableCamerasResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iracing.broadcast.GetAvailableCamerasResponse}
 */
proto.iracing.broadcast.GetAvailableCamerasResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.iracing.broadcast.CameraGroup;
      reader.readMessage(value,proto.iracing.broadcast.CameraGroup.deserializeBinaryFromReader);
      msg.addCameraGroups(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCarIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroup(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCamera(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iracing.broadcast.GetAvailableCamerasResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iracing.broadcast.GetAvailableCamerasResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iracing.broadcast.GetAvailableCamerasResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iracing.broadcast.GetAvailableCamerasResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCameraGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.iracing.broadcast.CameraGroup.serializeBinaryToWriter
    );
  }
  f = message.getCarIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getGroup();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCamera();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * repeated CameraGroup camera_groups = 1;
 * @return {!Array<!proto.iracing.broadcast.CameraGroup>}
 */
proto.iracing.broadcast.GetAvailableCamerasResponse.prototype.getCameraGroupsList = function() {
  return /** @type{!Array<!proto.iracing.broadcast.CameraGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.iracing.broadcast.CameraGroup, 1));
};


/**
 * @param {!Array<!proto.iracing.broadcast.CameraGroup>} value
 * @return {!proto.iracing.broadcast.GetAvailableCamerasResponse} returns this
*/
proto.iracing.broadcast.GetAvailableCamerasResponse.prototype.setCameraGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.iracing.broadcast.CameraGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.iracing.broadcast.CameraGroup}
 */
proto.iracing.broadcast.GetAvailableCamerasResponse.prototype.addCameraGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.iracing.broadcast.CameraGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.iracing.broadcast.GetAvailableCamerasResponse} returns this
 */
proto.iracing.broadcast.GetAvailableCamerasResponse.prototype.clearCameraGroupsList = function() {
  return this.setCameraGroupsList([]);
};


/**
 * optional uint32 car_index = 2;
 * @return {number}
 */
proto.iracing.broadcast.GetAvailableCamerasResponse.prototype.getCarIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.GetAvailableCamerasResponse} returns this
 */
proto.iracing.broadcast.GetAvailableCamerasResponse.prototype.setCarIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 group = 3;
 * @return {number}
 */
proto.iracing.broadcast.GetAvailableCamerasResponse.prototype.getGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.GetAvailableCamerasResponse} returns this
 */
proto.iracing.broadcast.GetAvailableCamerasResponse.prototype.setGroup = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 camera = 4;
 * @return {number}
 */
proto.iracing.broadcast.GetAvailableCamerasResponse.prototype.getCamera = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.iracing.broadcast.GetAvailableCamerasResponse} returns this
 */
proto.iracing.broadcast.GetAvailableCamerasResponse.prototype.setCamera = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.iracing.broadcast.TelemetryCommandMode = {
  TELEMETRY_COMMAND_MODE_UNKNOWN: 0,
  TELEMETRY_COMMAND_MODE_STOP: 1,
  TELEMETRY_COMMAND_MODE_START: 2,
  TELEMETRY_COMMAND_MODE_RESTART: 3
};

/**
 * @enum {number}
 */
proto.iracing.broadcast.ChatCommandMode = {
  CHAT_COMMAND_MODE_UNKNOWN: 0,
  CHAT_COMMAND_MODE_MACRO: 1,
  CHAT_COMMAND_MODE_BEGIN_CHAT: 2,
  CHAT_COMMAND_MODE_REPLY: 3,
  CHAT_COMMAND_MODE_CANCEL: 4
};

/**
 * @enum {number}
 */
proto.iracing.broadcast.CameraState = {
  CAMERA_STATE_UNKNOWN: 0,
  CAMERA_STATE_CAMERA_TOOL_ACTIVE: 1,
  CAMERA_STATE_UI_HIDDEN: 2,
  CAMERA_STATE_USE_AUTO_SHOT_SELECTION: 3,
  CAMERA_STATE_USE_TEMPORARY_EDITS: 4,
  CAMERA_STATE_USE_KEY_ACCELERATION: 5,
  CAMERA_STATE_USE_KEY10X_ACCELERATION: 6,
  CAMERA_STATE_USE_MOUSE_AIM_MODE: 7
};

/**
 * @enum {number}
 */
proto.iracing.broadcast.ReplayPositionMode = {
  REPLAY_POSITION_MODE_UNKNOWN: 0,
  REPLAY_POSITION_MODE_BEGIN: 1,
  REPLAY_POSITION_MODE_CURRENT: 2,
  REPLAY_POSITION_MODE_END: 3
};

/**
 * @enum {number}
 */
proto.iracing.broadcast.ReplaySearchMode = {
  REPLAY_SEARCH_MODE_UNKNOWN: 0,
  REPLAY_SEARCH_MODE_TO_START: 1,
  REPLAY_SEARCH_MODE_TO_END: 2,
  REPLAY_SEARCH_MODE_PREVIOUS_SESSION: 3,
  REPLAY_SEARCH_MODE_NEXT_SESSION: 4,
  REPLAY_SEARCH_MODE_PREVIOUS_LAP: 5,
  REPLAY_SEARCH_MODE_NEXT_LAP: 6,
  REPLAY_SEARCH_MODE_PREVIOUS_FRAME: 7,
  REPLAY_SEARCH_MODE_NEXT_FRAME: 8,
  REPLAY_SEARCH_MODE_PREVIOUS_INCIDENT: 9,
  REPLAY_SEARCH_MODE_NEXT_INCIDENT: 10
};

/**
 * @enum {number}
 */
proto.iracing.broadcast.PitCommandMode = {
  PIT_COMMAND_MODE_UNKNOWN: 0,
  PIT_COMMAND_MODE_CLEAR: 1,
  PIT_COMMAND_MODE_TEAR_OFF: 2,
  PIT_COMMAND_MODE_FUEL: 3,
  PIT_COMMAND_MODE_LF_TIRE: 4,
  PIT_COMMAND_MODE_RF_TIRE: 5,
  PIT_COMMAND_MODE_LR_TIRE: 6,
  PIT_COMMAND_MODE_RR_TIRE: 7,
  PIT_COMMAND_MODE_CLEAR_TIRES: 8,
  PIT_COMMAND_MODE_FAST_REPAIR: 9,
  PIT_COMMAND_MODE_CLEAR_TEAR_OFF: 10,
  PIT_COMMAND_MODE_CLEAR_FAST_REPAIR: 11,
  PIT_COMMAND_MODE_CLEAR_FUEL: 12
};

/**
 * @enum {number}
 */
proto.iracing.broadcast.ReplayStateMode = {
  REPLAY_STATE_MODE_UNKNOWN: 0,
  REPLAY_STATE_MODE_ERASE_TAPE: 1
};

/**
 * @enum {number}
 */
proto.iracing.broadcast.VideoCaptureMode = {
  VIDEO_CAPTURE_MODE_UNKNOWN: 0,
  VIDEO_CAPTURE_MODE_SCREENSHOT: 1,
  VIDEO_CAPTURE_MODE_START: 2,
  VIDEO_CAPTURE_MODE_STOP: 3,
  VIDEO_CAPTURE_MODE_TOGGLE: 4,
  VIDEO_CAPTURE_MODE_SHOW_TIMER: 5,
  VIDEO_CAPTURE_MODE_HIDE_TIMER: 6
};

/**
 * @enum {number}
 */
proto.iracing.broadcast.ForceFeedbackCommandMode = {
  FORCE_FEEDBACK_COMMAND_MODE_UNKNOWN: 0,
  FORCE_FEEDBACK_COMMAND_MODE_MAX_FORCE: 1
};

goog.object.extend(exports, proto.iracing.broadcast);
