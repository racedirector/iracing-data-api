/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: proto/broadcast.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/empty";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace iracing.broadcast {
    export enum TelemetryCommandMode {
        TELEMETRY_COMMAND_MODE_UNKNOWN = 0,
        TELEMETRY_COMMAND_MODE_STOP = 1,
        TELEMETRY_COMMAND_MODE_START = 2,
        TELEMETRY_COMMAND_MODE_RESTART = 3
    }
    export enum ChatCommandMode {
        CHAT_COMMAND_MODE_UNKNOWN = 0,
        CHAT_COMMAND_MODE_MACRO = 1,
        CHAT_COMMAND_MODE_BEGIN_CHAT = 2,
        CHAT_COMMAND_MODE_REPLY = 3,
        CHAT_COMMAND_MODE_CANCEL = 4
    }
    export enum CameraState {
        CAMERA_STATE_UNKNOWN = 0,
        CAMERA_STATE_CAMERA_TOOL_ACTIVE = 1,
        CAMERA_STATE_UI_HIDDEN = 2,
        CAMERA_STATE_USE_AUTO_SHOT_SELECTION = 3,
        CAMERA_STATE_USE_TEMPORARY_EDITS = 4,
        CAMERA_STATE_USE_KEY_ACCELERATION = 5,
        CAMERA_STATE_USE_KEY10X_ACCELERATION = 6,
        CAMERA_STATE_USE_MOUSE_AIM_MODE = 7
    }
    export enum ReplayPositionMode {
        REPLAY_POSITION_MODE_UNKNOWN = 0,
        REPLAY_POSITION_MODE_BEGIN = 1,
        REPLAY_POSITION_MODE_CURRENT = 2,
        REPLAY_POSITION_MODE_END = 3
    }
    export enum ReplaySearchMode {
        REPLAY_SEARCH_MODE_UNKNOWN = 0,
        REPLAY_SEARCH_MODE_TO_START = 1,
        REPLAY_SEARCH_MODE_TO_END = 2,
        REPLAY_SEARCH_MODE_PREVIOUS_SESSION = 3,
        REPLAY_SEARCH_MODE_NEXT_SESSION = 4,
        REPLAY_SEARCH_MODE_PREVIOUS_LAP = 5,
        REPLAY_SEARCH_MODE_NEXT_LAP = 6,
        REPLAY_SEARCH_MODE_PREVIOUS_FRAME = 7,
        REPLAY_SEARCH_MODE_NEXT_FRAME = 8,
        REPLAY_SEARCH_MODE_PREVIOUS_INCIDENT = 9,
        REPLAY_SEARCH_MODE_NEXT_INCIDENT = 10
    }
    export enum PitCommandMode {
        PIT_COMMAND_MODE_UNKNOWN = 0,
        PIT_COMMAND_MODE_CLEAR = 1,
        PIT_COMMAND_MODE_TEAR_OFF = 2,
        PIT_COMMAND_MODE_FUEL = 3,
        PIT_COMMAND_MODE_LF_TIRE = 4,
        PIT_COMMAND_MODE_RF_TIRE = 5,
        PIT_COMMAND_MODE_LR_TIRE = 6,
        PIT_COMMAND_MODE_RR_TIRE = 7,
        PIT_COMMAND_MODE_CLEAR_TIRES = 8,
        PIT_COMMAND_MODE_FAST_REPAIR = 9,
        PIT_COMMAND_MODE_CLEAR_TEAR_OFF = 10,
        PIT_COMMAND_MODE_CLEAR_FAST_REPAIR = 11,
        PIT_COMMAND_MODE_CLEAR_FUEL = 12
    }
    export enum ReplayStateMode {
        REPLAY_STATE_MODE_UNKNOWN = 0,
        REPLAY_STATE_MODE_ERASE_TAPE = 1
    }
    export enum VideoCaptureMode {
        VIDEO_CAPTURE_MODE_UNKNOWN = 0,
        VIDEO_CAPTURE_MODE_SCREENSHOT = 1,
        VIDEO_CAPTURE_MODE_START = 2,
        VIDEO_CAPTURE_MODE_STOP = 3,
        VIDEO_CAPTURE_MODE_TOGGLE = 4,
        VIDEO_CAPTURE_MODE_SHOW_TIMER = 5,
        VIDEO_CAPTURE_MODE_HIDE_TIMER = 6
    }
    export enum ForceFeedbackCommandMode {
        FORCE_FEEDBACK_COMMAND_MODE_UNKNOWN = 0,
        FORCE_FEEDBACK_COMMAND_MODE_MAX_FORCE = 1
    }
    export class CameraSwitchPositionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3]];
        constructor(data?: any[] | ({} & (({
            position?: number;
        }) | ({
            group?: number;
        }) | ({
            camera?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
                if ("camera" in data && data.camera != undefined) {
                    this.camera = data.camera;
                }
            }
        }
        get position() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set position(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_position() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get group() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set group(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_group() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get camera() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set camera(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_camera() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _position() {
            const cases: {
                [index: number]: "none" | "position";
            } = {
                0: "none",
                1: "position"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _group() {
            const cases: {
                [index: number]: "none" | "group";
            } = {
                0: "none",
                2: "group"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _camera() {
            const cases: {
                [index: number]: "none" | "camera";
            } = {
                0: "none",
                3: "camera"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            position?: number;
            group?: number;
            camera?: number;
        }): CameraSwitchPositionRequest {
            const message = new CameraSwitchPositionRequest({});
            if (data.position != null) {
                message.position = data.position;
            }
            if (data.group != null) {
                message.group = data.group;
            }
            if (data.camera != null) {
                message.camera = data.camera;
            }
            return message;
        }
        toObject() {
            const data: {
                position?: number;
                group?: number;
                camera?: number;
            } = {};
            if (this.position != null) {
                data.position = this.position;
            }
            if (this.group != null) {
                data.group = this.group;
            }
            if (this.camera != null) {
                data.camera = this.camera;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_position)
                writer.writeUint32(1, this.position);
            if (this.has_group)
                writer.writeUint32(2, this.group);
            if (this.has_camera)
                writer.writeUint32(3, this.camera);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CameraSwitchPositionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CameraSwitchPositionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.position = reader.readUint32();
                        break;
                    case 2:
                        message.group = reader.readUint32();
                        break;
                    case 3:
                        message.camera = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CameraSwitchPositionRequest {
            return CameraSwitchPositionRequest.deserialize(bytes);
        }
    }
    export class CameraSwitchPositionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            car_index?: number;
            group?: number;
            camera?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("car_index" in data && data.car_index != undefined) {
                    this.car_index = data.car_index;
                }
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
                if ("camera" in data && data.camera != undefined) {
                    this.camera = data.camera;
                }
            }
        }
        get car_index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set car_index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set group(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get camera() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set camera(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            car_index?: number;
            group?: number;
            camera?: number;
        }): CameraSwitchPositionResponse {
            const message = new CameraSwitchPositionResponse({});
            if (data.car_index != null) {
                message.car_index = data.car_index;
            }
            if (data.group != null) {
                message.group = data.group;
            }
            if (data.camera != null) {
                message.camera = data.camera;
            }
            return message;
        }
        toObject() {
            const data: {
                car_index?: number;
                group?: number;
                camera?: number;
            } = {};
            if (this.car_index != null) {
                data.car_index = this.car_index;
            }
            if (this.group != null) {
                data.group = this.group;
            }
            if (this.camera != null) {
                data.camera = this.camera;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.car_index != 0)
                writer.writeUint32(1, this.car_index);
            if (this.group != 0)
                writer.writeUint32(2, this.group);
            if (this.camera != 0)
                writer.writeUint32(3, this.camera);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CameraSwitchPositionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CameraSwitchPositionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.car_index = reader.readUint32();
                        break;
                    case 2:
                        message.group = reader.readUint32();
                        break;
                    case 3:
                        message.camera = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CameraSwitchPositionResponse {
            return CameraSwitchPositionResponse.deserialize(bytes);
        }
    }
    export class CameraSwitchNumberRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3]];
        constructor(data?: any[] | ({} & (({
            car_number?: string;
        }) | ({
            group?: number;
        }) | ({
            camera?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("car_number" in data && data.car_number != undefined) {
                    this.car_number = data.car_number;
                }
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
                if ("camera" in data && data.camera != undefined) {
                    this.camera = data.camera;
                }
            }
        }
        get car_number() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set car_number(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_car_number() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get group() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set group(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_group() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get camera() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set camera(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_camera() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _car_number() {
            const cases: {
                [index: number]: "none" | "car_number";
            } = {
                0: "none",
                1: "car_number"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _group() {
            const cases: {
                [index: number]: "none" | "group";
            } = {
                0: "none",
                2: "group"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _camera() {
            const cases: {
                [index: number]: "none" | "camera";
            } = {
                0: "none",
                3: "camera"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            car_number?: string;
            group?: number;
            camera?: number;
        }): CameraSwitchNumberRequest {
            const message = new CameraSwitchNumberRequest({});
            if (data.car_number != null) {
                message.car_number = data.car_number;
            }
            if (data.group != null) {
                message.group = data.group;
            }
            if (data.camera != null) {
                message.camera = data.camera;
            }
            return message;
        }
        toObject() {
            const data: {
                car_number?: string;
                group?: number;
                camera?: number;
            } = {};
            if (this.car_number != null) {
                data.car_number = this.car_number;
            }
            if (this.group != null) {
                data.group = this.group;
            }
            if (this.camera != null) {
                data.camera = this.camera;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_car_number)
                writer.writeString(1, this.car_number);
            if (this.has_group)
                writer.writeUint32(2, this.group);
            if (this.has_camera)
                writer.writeUint32(3, this.camera);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CameraSwitchNumberRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CameraSwitchNumberRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.car_number = reader.readString();
                        break;
                    case 2:
                        message.group = reader.readUint32();
                        break;
                    case 3:
                        message.camera = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CameraSwitchNumberRequest {
            return CameraSwitchNumberRequest.deserialize(bytes);
        }
    }
    export class CameraSwitchNumberResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            car_index?: number;
            group?: number;
            camera?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("car_index" in data && data.car_index != undefined) {
                    this.car_index = data.car_index;
                }
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
                if ("camera" in data && data.camera != undefined) {
                    this.camera = data.camera;
                }
            }
        }
        get car_index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set car_index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get group() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set group(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get camera() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set camera(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            car_index?: number;
            group?: number;
            camera?: number;
        }): CameraSwitchNumberResponse {
            const message = new CameraSwitchNumberResponse({});
            if (data.car_index != null) {
                message.car_index = data.car_index;
            }
            if (data.group != null) {
                message.group = data.group;
            }
            if (data.camera != null) {
                message.camera = data.camera;
            }
            return message;
        }
        toObject() {
            const data: {
                car_index?: number;
                group?: number;
                camera?: number;
            } = {};
            if (this.car_index != null) {
                data.car_index = this.car_index;
            }
            if (this.group != null) {
                data.group = this.group;
            }
            if (this.camera != null) {
                data.camera = this.camera;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.car_index != 0)
                writer.writeUint32(1, this.car_index);
            if (this.group != 0)
                writer.writeUint32(2, this.group);
            if (this.camera != 0)
                writer.writeUint32(3, this.camera);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CameraSwitchNumberResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CameraSwitchNumberResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.car_index = reader.readUint32();
                        break;
                    case 2:
                        message.group = reader.readUint32();
                        break;
                    case 3:
                        message.camera = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CameraSwitchNumberResponse {
            return CameraSwitchNumberResponse.deserialize(bytes);
        }
    }
    export class CameraSetStateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            state?: CameraState;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
            }
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 1, CameraState.CAMERA_STATE_UNKNOWN) as CameraState;
        }
        set state(value: CameraState) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_state() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get _state() {
            const cases: {
                [index: number]: "none" | "state";
            } = {
                0: "none",
                1: "state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            state?: CameraState;
        }): CameraSetStateRequest {
            const message = new CameraSetStateRequest({});
            if (data.state != null) {
                message.state = data.state;
            }
            return message;
        }
        toObject() {
            const data: {
                state?: CameraState;
            } = {};
            if (this.state != null) {
                data.state = this.state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_state)
                writer.writeEnum(1, this.state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CameraSetStateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CameraSetStateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CameraSetStateRequest {
            return CameraSetStateRequest.deserialize(bytes);
        }
    }
    export class CameraSetStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            state?: CameraState;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
            }
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 1, CameraState.CAMERA_STATE_UNKNOWN) as CameraState;
        }
        set state(value: CameraState) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            state?: CameraState;
        }): CameraSetStateResponse {
            const message = new CameraSetStateResponse({});
            if (data.state != null) {
                message.state = data.state;
            }
            return message;
        }
        toObject() {
            const data: {
                state?: CameraState;
            } = {};
            if (this.state != null) {
                data.state = this.state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.state != CameraState.CAMERA_STATE_UNKNOWN)
                writer.writeEnum(1, this.state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CameraSetStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CameraSetStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CameraSetStateResponse {
            return CameraSetStateResponse.deserialize(bytes);
        }
    }
    export class ReplaySetPlaySpeedRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            speed?: number;
        }) | ({
            is_slow_motion?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("speed" in data && data.speed != undefined) {
                    this.speed = data.speed;
                }
                if ("is_slow_motion" in data && data.is_slow_motion != undefined) {
                    this.is_slow_motion = data.is_slow_motion;
                }
            }
        }
        get speed() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set speed(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_speed() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get is_slow_motion() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set is_slow_motion(value: boolean) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_is_slow_motion() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _speed() {
            const cases: {
                [index: number]: "none" | "speed";
            } = {
                0: "none",
                1: "speed"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _is_slow_motion() {
            const cases: {
                [index: number]: "none" | "is_slow_motion";
            } = {
                0: "none",
                2: "is_slow_motion"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            speed?: number;
            is_slow_motion?: boolean;
        }): ReplaySetPlaySpeedRequest {
            const message = new ReplaySetPlaySpeedRequest({});
            if (data.speed != null) {
                message.speed = data.speed;
            }
            if (data.is_slow_motion != null) {
                message.is_slow_motion = data.is_slow_motion;
            }
            return message;
        }
        toObject() {
            const data: {
                speed?: number;
                is_slow_motion?: boolean;
            } = {};
            if (this.speed != null) {
                data.speed = this.speed;
            }
            if (this.is_slow_motion != null) {
                data.is_slow_motion = this.is_slow_motion;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_speed)
                writer.writeUint32(1, this.speed);
            if (this.has_is_slow_motion)
                writer.writeBool(2, this.is_slow_motion);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaySetPlaySpeedRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaySetPlaySpeedRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.speed = reader.readUint32();
                        break;
                    case 2:
                        message.is_slow_motion = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaySetPlaySpeedRequest {
            return ReplaySetPlaySpeedRequest.deserialize(bytes);
        }
    }
    export class ReplaySetPlaySpeedResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            speed?: number;
            is_slow_motion?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("speed" in data && data.speed != undefined) {
                    this.speed = data.speed;
                }
                if ("is_slow_motion" in data && data.is_slow_motion != undefined) {
                    this.is_slow_motion = data.is_slow_motion;
                }
            }
        }
        get speed() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set speed(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_slow_motion() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set is_slow_motion(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            speed?: number;
            is_slow_motion?: boolean;
        }): ReplaySetPlaySpeedResponse {
            const message = new ReplaySetPlaySpeedResponse({});
            if (data.speed != null) {
                message.speed = data.speed;
            }
            if (data.is_slow_motion != null) {
                message.is_slow_motion = data.is_slow_motion;
            }
            return message;
        }
        toObject() {
            const data: {
                speed?: number;
                is_slow_motion?: boolean;
            } = {};
            if (this.speed != null) {
                data.speed = this.speed;
            }
            if (this.is_slow_motion != null) {
                data.is_slow_motion = this.is_slow_motion;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.speed != 0)
                writer.writeUint32(1, this.speed);
            if (this.is_slow_motion != false)
                writer.writeBool(2, this.is_slow_motion);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaySetPlaySpeedResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaySetPlaySpeedResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.speed = reader.readUint32();
                        break;
                    case 2:
                        message.is_slow_motion = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaySetPlaySpeedResponse {
            return ReplaySetPlaySpeedResponse.deserialize(bytes);
        }
    }
    export class ReplaySetPlayPositionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            mode?: ReplayPositionMode;
        }) | ({
            frame?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
                if ("frame" in data && data.frame != undefined) {
                    this.frame = data.frame;
                }
            }
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ReplayPositionMode.REPLAY_POSITION_MODE_UNKNOWN) as ReplayPositionMode;
        }
        set mode(value: ReplayPositionMode) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_mode() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get frame() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set frame(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_frame() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _mode() {
            const cases: {
                [index: number]: "none" | "mode";
            } = {
                0: "none",
                1: "mode"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _frame() {
            const cases: {
                [index: number]: "none" | "frame";
            } = {
                0: "none",
                2: "frame"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            mode?: ReplayPositionMode;
            frame?: number;
        }): ReplaySetPlayPositionRequest {
            const message = new ReplaySetPlayPositionRequest({});
            if (data.mode != null) {
                message.mode = data.mode;
            }
            if (data.frame != null) {
                message.frame = data.frame;
            }
            return message;
        }
        toObject() {
            const data: {
                mode?: ReplayPositionMode;
                frame?: number;
            } = {};
            if (this.mode != null) {
                data.mode = this.mode;
            }
            if (this.frame != null) {
                data.frame = this.frame;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_mode)
                writer.writeEnum(1, this.mode);
            if (this.has_frame)
                writer.writeUint32(2, this.frame);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaySetPlayPositionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaySetPlayPositionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mode = reader.readEnum();
                        break;
                    case 2:
                        message.frame = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaySetPlayPositionRequest {
            return ReplaySetPlayPositionRequest.deserialize(bytes);
        }
    }
    export class ReplaySetPlayPositionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            frame?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("frame" in data && data.frame != undefined) {
                    this.frame = data.frame;
                }
            }
        }
        get frame() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set frame(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            frame?: number;
        }): ReplaySetPlayPositionResponse {
            const message = new ReplaySetPlayPositionResponse({});
            if (data.frame != null) {
                message.frame = data.frame;
            }
            return message;
        }
        toObject() {
            const data: {
                frame?: number;
            } = {};
            if (this.frame != null) {
                data.frame = this.frame;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.frame != 0)
                writer.writeUint32(1, this.frame);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaySetPlayPositionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaySetPlayPositionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.frame = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaySetPlayPositionResponse {
            return ReplaySetPlayPositionResponse.deserialize(bytes);
        }
    }
    export class ReplaySearchRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            mode?: ReplaySearchMode;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
            }
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ReplaySearchMode.REPLAY_SEARCH_MODE_UNKNOWN) as ReplaySearchMode;
        }
        set mode(value: ReplaySearchMode) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_mode() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get _mode() {
            const cases: {
                [index: number]: "none" | "mode";
            } = {
                0: "none",
                1: "mode"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            mode?: ReplaySearchMode;
        }): ReplaySearchRequest {
            const message = new ReplaySearchRequest({});
            if (data.mode != null) {
                message.mode = data.mode;
            }
            return message;
        }
        toObject() {
            const data: {
                mode?: ReplaySearchMode;
            } = {};
            if (this.mode != null) {
                data.mode = this.mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_mode)
                writer.writeEnum(1, this.mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaySearchRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaySearchRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaySearchRequest {
            return ReplaySearchRequest.deserialize(bytes);
        }
    }
    export class ReplaySearchResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            frame?: number;
            session_number?: number;
            session_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("frame" in data && data.frame != undefined) {
                    this.frame = data.frame;
                }
                if ("session_number" in data && data.session_number != undefined) {
                    this.session_number = data.session_number;
                }
                if ("session_time" in data && data.session_time != undefined) {
                    this.session_time = data.session_time;
                }
            }
        }
        get frame() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set frame(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get session_number() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set session_number(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get session_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set session_time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            frame?: number;
            session_number?: number;
            session_time?: number;
        }): ReplaySearchResponse {
            const message = new ReplaySearchResponse({});
            if (data.frame != null) {
                message.frame = data.frame;
            }
            if (data.session_number != null) {
                message.session_number = data.session_number;
            }
            if (data.session_time != null) {
                message.session_time = data.session_time;
            }
            return message;
        }
        toObject() {
            const data: {
                frame?: number;
                session_number?: number;
                session_time?: number;
            } = {};
            if (this.frame != null) {
                data.frame = this.frame;
            }
            if (this.session_number != null) {
                data.session_number = this.session_number;
            }
            if (this.session_time != null) {
                data.session_time = this.session_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.frame != 0)
                writer.writeUint32(1, this.frame);
            if (this.session_number != 0)
                writer.writeUint32(2, this.session_number);
            if (this.session_time != 0)
                writer.writeFloat(3, this.session_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaySearchResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaySearchResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.frame = reader.readUint32();
                        break;
                    case 2:
                        message.session_number = reader.readUint32();
                        break;
                    case 3:
                        message.session_time = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaySearchResponse {
            return ReplaySearchResponse.deserialize(bytes);
        }
    }
    export class ReplaySetStateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            state?: ReplayStateMode;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
            }
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 1, ReplayStateMode.REPLAY_STATE_MODE_UNKNOWN) as ReplayStateMode;
        }
        set state(value: ReplayStateMode) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_state() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get _state() {
            const cases: {
                [index: number]: "none" | "state";
            } = {
                0: "none",
                1: "state"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            state?: ReplayStateMode;
        }): ReplaySetStateRequest {
            const message = new ReplaySetStateRequest({});
            if (data.state != null) {
                message.state = data.state;
            }
            return message;
        }
        toObject() {
            const data: {
                state?: ReplayStateMode;
            } = {};
            if (this.state != null) {
                data.state = this.state;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_state)
                writer.writeEnum(1, this.state);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaySetStateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaySetStateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.state = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaySetStateRequest {
            return ReplaySetStateRequest.deserialize(bytes);
        }
    }
    export class ReplaySetStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ReplaySetStateResponse {
            const message = new ReplaySetStateResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaySetStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaySetStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaySetStateResponse {
            return ReplaySetStateResponse.deserialize(bytes);
        }
    }
    export class ReloadTexturesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            car_idx?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("car_idx" in data && data.car_idx != undefined) {
                    this.car_idx = data.car_idx;
                }
            }
        }
        get car_idx() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set car_idx(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_car_idx() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get _car_idx() {
            const cases: {
                [index: number]: "none" | "car_idx";
            } = {
                0: "none",
                1: "car_idx"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            car_idx?: number;
        }): ReloadTexturesRequest {
            const message = new ReloadTexturesRequest({});
            if (data.car_idx != null) {
                message.car_idx = data.car_idx;
            }
            return message;
        }
        toObject() {
            const data: {
                car_idx?: number;
            } = {};
            if (this.car_idx != null) {
                data.car_idx = this.car_idx;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_car_idx)
                writer.writeUint32(1, this.car_idx);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReloadTexturesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReloadTexturesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.car_idx = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReloadTexturesRequest {
            return ReloadTexturesRequest.deserialize(bytes);
        }
    }
    export class ReloadTexturesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ReloadTexturesResponse {
            const message = new ReloadTexturesResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReloadTexturesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReloadTexturesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReloadTexturesResponse {
            return ReloadTexturesResponse.deserialize(bytes);
        }
    }
    export class ChatCommandRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            mode?: ChatCommandMode;
        }) | ({
            macro?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
                if ("macro" in data && data.macro != undefined) {
                    this.macro = data.macro;
                }
            }
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ChatCommandMode.CHAT_COMMAND_MODE_UNKNOWN) as ChatCommandMode;
        }
        set mode(value: ChatCommandMode) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_mode() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get macro() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set macro(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_macro() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _mode() {
            const cases: {
                [index: number]: "none" | "mode";
            } = {
                0: "none",
                1: "mode"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _macro() {
            const cases: {
                [index: number]: "none" | "macro";
            } = {
                0: "none",
                2: "macro"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            mode?: ChatCommandMode;
            macro?: number;
        }): ChatCommandRequest {
            const message = new ChatCommandRequest({});
            if (data.mode != null) {
                message.mode = data.mode;
            }
            if (data.macro != null) {
                message.macro = data.macro;
            }
            return message;
        }
        toObject() {
            const data: {
                mode?: ChatCommandMode;
                macro?: number;
            } = {};
            if (this.mode != null) {
                data.mode = this.mode;
            }
            if (this.macro != null) {
                data.macro = this.macro;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_mode)
                writer.writeEnum(1, this.mode);
            if (this.has_macro)
                writer.writeUint32(2, this.macro);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatCommandRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatCommandRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mode = reader.readEnum();
                        break;
                    case 2:
                        message.macro = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatCommandRequest {
            return ChatCommandRequest.deserialize(bytes);
        }
    }
    export class ChatCommandResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ChatCommandResponse {
            const message = new ChatCommandResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatCommandResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatCommandResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatCommandResponse {
            return ChatCommandResponse.deserialize(bytes);
        }
    }
    export class PitCommandRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            mode?: PitCommandMode;
        }) | ({
            value?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 1, PitCommandMode.PIT_COMMAND_MODE_UNKNOWN) as PitCommandMode;
        }
        set mode(value: PitCommandMode) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_mode() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _mode() {
            const cases: {
                [index: number]: "none" | "mode";
            } = {
                0: "none",
                1: "mode"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _value() {
            const cases: {
                [index: number]: "none" | "value";
            } = {
                0: "none",
                2: "value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            mode?: PitCommandMode;
            value?: number;
        }): PitCommandRequest {
            const message = new PitCommandRequest({});
            if (data.mode != null) {
                message.mode = data.mode;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                mode?: PitCommandMode;
                value?: number;
            } = {};
            if (this.mode != null) {
                data.mode = this.mode;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_mode)
                writer.writeEnum(1, this.mode);
            if (this.has_value)
                writer.writeFloat(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PitCommandRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PitCommandRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mode = reader.readEnum();
                        break;
                    case 2:
                        message.value = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PitCommandRequest {
            return PitCommandRequest.deserialize(bytes);
        }
    }
    export class PitCommandResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            service_flags?: number;
            fuel?: number;
            lf_pressure?: number;
            rf_pressure?: number;
            lr_pressure?: number;
            rr_pressure?: number;
            tire_compound?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("service_flags" in data && data.service_flags != undefined) {
                    this.service_flags = data.service_flags;
                }
                if ("fuel" in data && data.fuel != undefined) {
                    this.fuel = data.fuel;
                }
                if ("lf_pressure" in data && data.lf_pressure != undefined) {
                    this.lf_pressure = data.lf_pressure;
                }
                if ("rf_pressure" in data && data.rf_pressure != undefined) {
                    this.rf_pressure = data.rf_pressure;
                }
                if ("lr_pressure" in data && data.lr_pressure != undefined) {
                    this.lr_pressure = data.lr_pressure;
                }
                if ("rr_pressure" in data && data.rr_pressure != undefined) {
                    this.rr_pressure = data.rr_pressure;
                }
                if ("tire_compound" in data && data.tire_compound != undefined) {
                    this.tire_compound = data.tire_compound;
                }
            }
        }
        get service_flags() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set service_flags(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get fuel() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set fuel(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get lf_pressure() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set lf_pressure(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get rf_pressure() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set rf_pressure(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get lr_pressure() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set lr_pressure(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get rr_pressure() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set rr_pressure(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get tire_compound() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set tire_compound(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            service_flags?: number;
            fuel?: number;
            lf_pressure?: number;
            rf_pressure?: number;
            lr_pressure?: number;
            rr_pressure?: number;
            tire_compound?: number;
        }): PitCommandResponse {
            const message = new PitCommandResponse({});
            if (data.service_flags != null) {
                message.service_flags = data.service_flags;
            }
            if (data.fuel != null) {
                message.fuel = data.fuel;
            }
            if (data.lf_pressure != null) {
                message.lf_pressure = data.lf_pressure;
            }
            if (data.rf_pressure != null) {
                message.rf_pressure = data.rf_pressure;
            }
            if (data.lr_pressure != null) {
                message.lr_pressure = data.lr_pressure;
            }
            if (data.rr_pressure != null) {
                message.rr_pressure = data.rr_pressure;
            }
            if (data.tire_compound != null) {
                message.tire_compound = data.tire_compound;
            }
            return message;
        }
        toObject() {
            const data: {
                service_flags?: number;
                fuel?: number;
                lf_pressure?: number;
                rf_pressure?: number;
                lr_pressure?: number;
                rr_pressure?: number;
                tire_compound?: number;
            } = {};
            if (this.service_flags != null) {
                data.service_flags = this.service_flags;
            }
            if (this.fuel != null) {
                data.fuel = this.fuel;
            }
            if (this.lf_pressure != null) {
                data.lf_pressure = this.lf_pressure;
            }
            if (this.rf_pressure != null) {
                data.rf_pressure = this.rf_pressure;
            }
            if (this.lr_pressure != null) {
                data.lr_pressure = this.lr_pressure;
            }
            if (this.rr_pressure != null) {
                data.rr_pressure = this.rr_pressure;
            }
            if (this.tire_compound != null) {
                data.tire_compound = this.tire_compound;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.service_flags != 0)
                writer.writeUint32(1, this.service_flags);
            if (this.fuel != 0)
                writer.writeFloat(2, this.fuel);
            if (this.lf_pressure != 0)
                writer.writeFloat(3, this.lf_pressure);
            if (this.rf_pressure != 0)
                writer.writeFloat(4, this.rf_pressure);
            if (this.lr_pressure != 0)
                writer.writeFloat(5, this.lr_pressure);
            if (this.rr_pressure != 0)
                writer.writeFloat(6, this.rr_pressure);
            if (this.tire_compound != 0)
                writer.writeUint32(7, this.tire_compound);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PitCommandResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PitCommandResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.service_flags = reader.readUint32();
                        break;
                    case 2:
                        message.fuel = reader.readFloat();
                        break;
                    case 3:
                        message.lf_pressure = reader.readFloat();
                        break;
                    case 4:
                        message.rf_pressure = reader.readFloat();
                        break;
                    case 5:
                        message.lr_pressure = reader.readFloat();
                        break;
                    case 6:
                        message.rr_pressure = reader.readFloat();
                        break;
                    case 7:
                        message.tire_compound = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PitCommandResponse {
            return PitCommandResponse.deserialize(bytes);
        }
    }
    export class TelemetryCommandRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            mode?: TelemetryCommandMode;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
            }
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 1, TelemetryCommandMode.TELEMETRY_COMMAND_MODE_UNKNOWN) as TelemetryCommandMode;
        }
        set mode(value: TelemetryCommandMode) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_mode() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get _mode() {
            const cases: {
                [index: number]: "none" | "mode";
            } = {
                0: "none",
                1: "mode"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            mode?: TelemetryCommandMode;
        }): TelemetryCommandRequest {
            const message = new TelemetryCommandRequest({});
            if (data.mode != null) {
                message.mode = data.mode;
            }
            return message;
        }
        toObject() {
            const data: {
                mode?: TelemetryCommandMode;
            } = {};
            if (this.mode != null) {
                data.mode = this.mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_mode)
                writer.writeEnum(1, this.mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TelemetryCommandRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TelemetryCommandRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TelemetryCommandRequest {
            return TelemetryCommandRequest.deserialize(bytes);
        }
    }
    export class TelemetryCommandResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            is_disk_logging_enabled?: boolean;
            is_disk_logging_active?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_disk_logging_enabled" in data && data.is_disk_logging_enabled != undefined) {
                    this.is_disk_logging_enabled = data.is_disk_logging_enabled;
                }
                if ("is_disk_logging_active" in data && data.is_disk_logging_active != undefined) {
                    this.is_disk_logging_active = data.is_disk_logging_active;
                }
            }
        }
        get is_disk_logging_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set is_disk_logging_enabled(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_disk_logging_active() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set is_disk_logging_active(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            is_disk_logging_enabled?: boolean;
            is_disk_logging_active?: boolean;
        }): TelemetryCommandResponse {
            const message = new TelemetryCommandResponse({});
            if (data.is_disk_logging_enabled != null) {
                message.is_disk_logging_enabled = data.is_disk_logging_enabled;
            }
            if (data.is_disk_logging_active != null) {
                message.is_disk_logging_active = data.is_disk_logging_active;
            }
            return message;
        }
        toObject() {
            const data: {
                is_disk_logging_enabled?: boolean;
                is_disk_logging_active?: boolean;
            } = {};
            if (this.is_disk_logging_enabled != null) {
                data.is_disk_logging_enabled = this.is_disk_logging_enabled;
            }
            if (this.is_disk_logging_active != null) {
                data.is_disk_logging_active = this.is_disk_logging_active;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_disk_logging_enabled != false)
                writer.writeBool(1, this.is_disk_logging_enabled);
            if (this.is_disk_logging_active != false)
                writer.writeBool(2, this.is_disk_logging_active);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TelemetryCommandResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TelemetryCommandResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_disk_logging_enabled = reader.readBool();
                        break;
                    case 2:
                        message.is_disk_logging_active = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TelemetryCommandResponse {
            return TelemetryCommandResponse.deserialize(bytes);
        }
    }
    export class ForceFeedbackCommandRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            mode?: ForceFeedbackCommandMode;
        }) | ({
            value?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 1, ForceFeedbackCommandMode.FORCE_FEEDBACK_COMMAND_MODE_UNKNOWN) as ForceFeedbackCommandMode;
        }
        set mode(value: ForceFeedbackCommandMode) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_mode() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _mode() {
            const cases: {
                [index: number]: "none" | "mode";
            } = {
                0: "none",
                1: "mode"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _value() {
            const cases: {
                [index: number]: "none" | "value";
            } = {
                0: "none",
                2: "value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            mode?: ForceFeedbackCommandMode;
            value?: number;
        }): ForceFeedbackCommandRequest {
            const message = new ForceFeedbackCommandRequest({});
            if (data.mode != null) {
                message.mode = data.mode;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                mode?: ForceFeedbackCommandMode;
                value?: number;
            } = {};
            if (this.mode != null) {
                data.mode = this.mode;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_mode)
                writer.writeEnum(1, this.mode);
            if (this.has_value)
                writer.writeFloat(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ForceFeedbackCommandRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ForceFeedbackCommandRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mode = reader.readEnum();
                        break;
                    case 2:
                        message.value = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ForceFeedbackCommandRequest {
            return ForceFeedbackCommandRequest.deserialize(bytes);
        }
    }
    export class ForceFeedbackCommandResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            max_force?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("max_force" in data && data.max_force != undefined) {
                    this.max_force = data.max_force;
                }
            }
        }
        get max_force() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set max_force(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            max_force?: number;
        }): ForceFeedbackCommandResponse {
            const message = new ForceFeedbackCommandResponse({});
            if (data.max_force != null) {
                message.max_force = data.max_force;
            }
            return message;
        }
        toObject() {
            const data: {
                max_force?: number;
            } = {};
            if (this.max_force != null) {
                data.max_force = this.max_force;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.max_force != 0)
                writer.writeFloat(1, this.max_force);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ForceFeedbackCommandResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ForceFeedbackCommandResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.max_force = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ForceFeedbackCommandResponse {
            return ForceFeedbackCommandResponse.deserialize(bytes);
        }
    }
    export class ReplaySearchSessionTimeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            session_number?: number;
        }) | ({
            session_time_ms?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("session_number" in data && data.session_number != undefined) {
                    this.session_number = data.session_number;
                }
                if ("session_time_ms" in data && data.session_time_ms != undefined) {
                    this.session_time_ms = data.session_time_ms;
                }
            }
        }
        get session_number() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set session_number(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_session_number() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get session_time_ms() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set session_time_ms(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_session_time_ms() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _session_number() {
            const cases: {
                [index: number]: "none" | "session_number";
            } = {
                0: "none",
                1: "session_number"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _session_time_ms() {
            const cases: {
                [index: number]: "none" | "session_time_ms";
            } = {
                0: "none",
                2: "session_time_ms"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            session_number?: number;
            session_time_ms?: number;
        }): ReplaySearchSessionTimeRequest {
            const message = new ReplaySearchSessionTimeRequest({});
            if (data.session_number != null) {
                message.session_number = data.session_number;
            }
            if (data.session_time_ms != null) {
                message.session_time_ms = data.session_time_ms;
            }
            return message;
        }
        toObject() {
            const data: {
                session_number?: number;
                session_time_ms?: number;
            } = {};
            if (this.session_number != null) {
                data.session_number = this.session_number;
            }
            if (this.session_time_ms != null) {
                data.session_time_ms = this.session_time_ms;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_session_number)
                writer.writeUint32(1, this.session_number);
            if (this.has_session_time_ms)
                writer.writeFloat(2, this.session_time_ms);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaySearchSessionTimeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaySearchSessionTimeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.session_number = reader.readUint32();
                        break;
                    case 2:
                        message.session_time_ms = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaySearchSessionTimeRequest {
            return ReplaySearchSessionTimeRequest.deserialize(bytes);
        }
    }
    export class ReplaySearchSessionTimeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ReplaySearchSessionTimeResponse {
            const message = new ReplaySearchSessionTimeResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReplaySearchSessionTimeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReplaySearchSessionTimeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReplaySearchSessionTimeResponse {
            return ReplaySearchSessionTimeResponse.deserialize(bytes);
        }
    }
    export class VideoCaptureRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({} & (({
            mode?: VideoCaptureMode;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mode" in data && data.mode != undefined) {
                    this.mode = data.mode;
                }
            }
        }
        get mode() {
            return pb_1.Message.getFieldWithDefault(this, 1, VideoCaptureMode.VIDEO_CAPTURE_MODE_UNKNOWN) as VideoCaptureMode;
        }
        set mode(value: VideoCaptureMode) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_mode() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get _mode() {
            const cases: {
                [index: number]: "none" | "mode";
            } = {
                0: "none",
                1: "mode"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            mode?: VideoCaptureMode;
        }): VideoCaptureRequest {
            const message = new VideoCaptureRequest({});
            if (data.mode != null) {
                message.mode = data.mode;
            }
            return message;
        }
        toObject() {
            const data: {
                mode?: VideoCaptureMode;
            } = {};
            if (this.mode != null) {
                data.mode = this.mode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_mode)
                writer.writeEnum(1, this.mode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideoCaptureRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VideoCaptureRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mode = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VideoCaptureRequest {
            return VideoCaptureRequest.deserialize(bytes);
        }
    }
    export class VideoCaptureResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): VideoCaptureResponse {
            const message = new VideoCaptureResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideoCaptureResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VideoCaptureResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VideoCaptureResponse {
            return VideoCaptureResponse.deserialize(bytes);
        }
    }
    export class CameraDetail extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            number?: number;
        }) | ({
            name?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("number" in data && data.number != undefined) {
                    this.number = data.number;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get number() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set number(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_number() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _number() {
            const cases: {
                [index: number]: "none" | "number";
            } = {
                0: "none",
                1: "number"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _name() {
            const cases: {
                [index: number]: "none" | "name";
            } = {
                0: "none",
                2: "name"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            number?: number;
            name?: string;
        }): CameraDetail {
            const message = new CameraDetail({});
            if (data.number != null) {
                message.number = data.number;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                number?: number;
                name?: string;
            } = {};
            if (this.number != null) {
                data.number = this.number;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_number)
                writer.writeUint32(1, this.number);
            if (this.has_name)
                writer.writeString(2, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CameraDetail {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CameraDetail();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.number = reader.readUint32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CameraDetail {
            return CameraDetail.deserialize(bytes);
        }
    }
    export class CameraGroup extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            number?: number;
            name?: string;
            cameras?: CameraDetail[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("number" in data && data.number != undefined) {
                    this.number = data.number;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("cameras" in data && data.cameras != undefined) {
                    this.cameras = data.cameras;
                }
            }
        }
        get number() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set number(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get cameras() {
            return pb_1.Message.getRepeatedWrapperField(this, CameraDetail, 3) as CameraDetail[];
        }
        set cameras(value: CameraDetail[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            number?: number;
            name?: string;
            cameras?: ReturnType<typeof CameraDetail.prototype.toObject>[];
        }): CameraGroup {
            const message = new CameraGroup({});
            if (data.number != null) {
                message.number = data.number;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.cameras != null) {
                message.cameras = data.cameras.map(item => CameraDetail.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                number?: number;
                name?: string;
                cameras?: ReturnType<typeof CameraDetail.prototype.toObject>[];
            } = {};
            if (this.number != null) {
                data.number = this.number;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.cameras != null) {
                data.cameras = this.cameras.map((item: CameraDetail) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.number != 0)
                writer.writeUint32(1, this.number);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.cameras.length)
                writer.writeRepeatedMessage(3, this.cameras, (item: CameraDetail) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CameraGroup {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CameraGroup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.number = reader.readUint32();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.cameras, () => pb_1.Message.addToRepeatedWrapperField(message, 3, CameraDetail.deserialize(reader), CameraDetail));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CameraGroup {
            return CameraGroup.deserialize(bytes);
        }
    }
    export class GetAvailableCamerasResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            camera_groups?: CameraGroup[];
            car_index?: number;
            group?: number;
            camera?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("camera_groups" in data && data.camera_groups != undefined) {
                    this.camera_groups = data.camera_groups;
                }
                if ("car_index" in data && data.car_index != undefined) {
                    this.car_index = data.car_index;
                }
                if ("group" in data && data.group != undefined) {
                    this.group = data.group;
                }
                if ("camera" in data && data.camera != undefined) {
                    this.camera = data.camera;
                }
            }
        }
        get camera_groups() {
            return pb_1.Message.getRepeatedWrapperField(this, CameraGroup, 1) as CameraGroup[];
        }
        set camera_groups(value: CameraGroup[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get car_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set car_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get group() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set group(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get camera() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set camera(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            camera_groups?: ReturnType<typeof CameraGroup.prototype.toObject>[];
            car_index?: number;
            group?: number;
            camera?: number;
        }): GetAvailableCamerasResponse {
            const message = new GetAvailableCamerasResponse({});
            if (data.camera_groups != null) {
                message.camera_groups = data.camera_groups.map(item => CameraGroup.fromObject(item));
            }
            if (data.car_index != null) {
                message.car_index = data.car_index;
            }
            if (data.group != null) {
                message.group = data.group;
            }
            if (data.camera != null) {
                message.camera = data.camera;
            }
            return message;
        }
        toObject() {
            const data: {
                camera_groups?: ReturnType<typeof CameraGroup.prototype.toObject>[];
                car_index?: number;
                group?: number;
                camera?: number;
            } = {};
            if (this.camera_groups != null) {
                data.camera_groups = this.camera_groups.map((item: CameraGroup) => item.toObject());
            }
            if (this.car_index != null) {
                data.car_index = this.car_index;
            }
            if (this.group != null) {
                data.group = this.group;
            }
            if (this.camera != null) {
                data.camera = this.camera;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.camera_groups.length)
                writer.writeRepeatedMessage(1, this.camera_groups, (item: CameraGroup) => item.serialize(writer));
            if (this.car_index != 0)
                writer.writeUint32(2, this.car_index);
            if (this.group != 0)
                writer.writeUint32(3, this.group);
            if (this.camera != 0)
                writer.writeUint32(4, this.camera);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAvailableCamerasResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAvailableCamerasResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.camera_groups, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CameraGroup.deserialize(reader), CameraGroup));
                        break;
                    case 2:
                        message.car_index = reader.readUint32();
                        break;
                    case 3:
                        message.group = reader.readUint32();
                        break;
                    case 4:
                        message.camera = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAvailableCamerasResponse {
            return GetAvailableCamerasResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedBroadcastService {
        static definition = {
            GetAvailableCameras: {
                path: "/iracing.broadcast.Broadcast/GetAvailableCameras",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAvailableCamerasResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAvailableCamerasResponse.deserialize(new Uint8Array(bytes))
            },
            CameraSwitchPosition: {
                path: "/iracing.broadcast.Broadcast/CameraSwitchPosition",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CameraSwitchPositionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CameraSwitchPositionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CameraSwitchPositionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CameraSwitchPositionResponse.deserialize(new Uint8Array(bytes))
            },
            CameraSwitchNumber: {
                path: "/iracing.broadcast.Broadcast/CameraSwitchNumber",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CameraSwitchNumberRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CameraSwitchNumberRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CameraSwitchNumberResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CameraSwitchNumberResponse.deserialize(new Uint8Array(bytes))
            },
            CameraSetState: {
                path: "/iracing.broadcast.Broadcast/CameraSetState",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CameraSetStateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CameraSetStateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CameraSetStateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CameraSetStateResponse.deserialize(new Uint8Array(bytes))
            },
            ReplaySetPlaySpeed: {
                path: "/iracing.broadcast.Broadcast/ReplaySetPlaySpeed",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReplaySetPlaySpeedRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReplaySetPlaySpeedRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReplaySetPlaySpeedResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReplaySetPlaySpeedResponse.deserialize(new Uint8Array(bytes))
            },
            ReplaySetPlayPosition: {
                path: "/iracing.broadcast.Broadcast/ReplaySetPlayPosition",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReplaySetPlayPositionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReplaySetPlayPositionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReplaySetPlayPositionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReplaySetPlayPositionResponse.deserialize(new Uint8Array(bytes))
            },
            ReplaySearch: {
                path: "/iracing.broadcast.Broadcast/ReplaySearch",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReplaySearchRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReplaySearchRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReplaySearchResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReplaySearchResponse.deserialize(new Uint8Array(bytes))
            },
            ReplaySetState: {
                path: "/iracing.broadcast.Broadcast/ReplaySetState",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReplaySetStateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReplaySetStateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReplaySetStateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReplaySetStateResponse.deserialize(new Uint8Array(bytes))
            },
            ReloadTextures: {
                path: "/iracing.broadcast.Broadcast/ReloadTextures",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReloadTexturesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReloadTexturesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReloadTexturesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReloadTexturesResponse.deserialize(new Uint8Array(bytes))
            },
            ChatCommand: {
                path: "/iracing.broadcast.Broadcast/ChatCommand",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ChatCommandRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatCommandRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatCommandResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatCommandResponse.deserialize(new Uint8Array(bytes))
            },
            PitCommand: {
                path: "/iracing.broadcast.Broadcast/PitCommand",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: PitCommandRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PitCommandRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PitCommandResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PitCommandResponse.deserialize(new Uint8Array(bytes))
            },
            PitCommandStream: {
                path: "/iracing.broadcast.Broadcast/PitCommandStream",
                requestStream: true,
                responseStream: false,
                requestSerialize: (message: PitCommandRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => PitCommandRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: PitCommandResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => PitCommandResponse.deserialize(new Uint8Array(bytes))
            },
            TelemetryCommand: {
                path: "/iracing.broadcast.Broadcast/TelemetryCommand",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TelemetryCommandRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TelemetryCommandRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TelemetryCommandResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TelemetryCommandResponse.deserialize(new Uint8Array(bytes))
            },
            ForceFeedbackCommand: {
                path: "/iracing.broadcast.Broadcast/ForceFeedbackCommand",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ForceFeedbackCommandRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ForceFeedbackCommandRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ForceFeedbackCommandResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ForceFeedbackCommandResponse.deserialize(new Uint8Array(bytes))
            },
            ReplaySearchSessionTime: {
                path: "/iracing.broadcast.Broadcast/ReplaySearchSessionTime",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ReplaySearchSessionTimeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReplaySearchSessionTimeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ReplaySearchSessionTimeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ReplaySearchSessionTimeResponse.deserialize(new Uint8Array(bytes))
            },
            VideoCapture: {
                path: "/iracing.broadcast.Broadcast/VideoCapture",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VideoCaptureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VideoCaptureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VideoCaptureResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VideoCaptureResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetAvailableCameras(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, GetAvailableCamerasResponse>, callback: grpc_1.sendUnaryData<GetAvailableCamerasResponse>): void;
        abstract CameraSwitchPosition(call: grpc_1.ServerUnaryCall<CameraSwitchPositionRequest, CameraSwitchPositionResponse>, callback: grpc_1.sendUnaryData<CameraSwitchPositionResponse>): void;
        abstract CameraSwitchNumber(call: grpc_1.ServerUnaryCall<CameraSwitchNumberRequest, CameraSwitchNumberResponse>, callback: grpc_1.sendUnaryData<CameraSwitchNumberResponse>): void;
        abstract CameraSetState(call: grpc_1.ServerUnaryCall<CameraSetStateRequest, CameraSetStateResponse>, callback: grpc_1.sendUnaryData<CameraSetStateResponse>): void;
        abstract ReplaySetPlaySpeed(call: grpc_1.ServerUnaryCall<ReplaySetPlaySpeedRequest, ReplaySetPlaySpeedResponse>, callback: grpc_1.sendUnaryData<ReplaySetPlaySpeedResponse>): void;
        abstract ReplaySetPlayPosition(call: grpc_1.ServerUnaryCall<ReplaySetPlayPositionRequest, ReplaySetPlayPositionResponse>, callback: grpc_1.sendUnaryData<ReplaySetPlayPositionResponse>): void;
        abstract ReplaySearch(call: grpc_1.ServerUnaryCall<ReplaySearchRequest, ReplaySearchResponse>, callback: grpc_1.sendUnaryData<ReplaySearchResponse>): void;
        abstract ReplaySetState(call: grpc_1.ServerUnaryCall<ReplaySetStateRequest, ReplaySetStateResponse>, callback: grpc_1.sendUnaryData<ReplaySetStateResponse>): void;
        abstract ReloadTextures(call: grpc_1.ServerUnaryCall<ReloadTexturesRequest, ReloadTexturesResponse>, callback: grpc_1.sendUnaryData<ReloadTexturesResponse>): void;
        abstract ChatCommand(call: grpc_1.ServerUnaryCall<ChatCommandRequest, ChatCommandResponse>, callback: grpc_1.sendUnaryData<ChatCommandResponse>): void;
        abstract PitCommand(call: grpc_1.ServerUnaryCall<PitCommandRequest, PitCommandResponse>, callback: grpc_1.sendUnaryData<PitCommandResponse>): void;
        abstract PitCommandStream(call: grpc_1.ServerReadableStream<PitCommandRequest, PitCommandResponse>, callback: grpc_1.sendUnaryData<PitCommandResponse>): void;
        abstract TelemetryCommand(call: grpc_1.ServerUnaryCall<TelemetryCommandRequest, TelemetryCommandResponse>, callback: grpc_1.sendUnaryData<TelemetryCommandResponse>): void;
        abstract ForceFeedbackCommand(call: grpc_1.ServerUnaryCall<ForceFeedbackCommandRequest, ForceFeedbackCommandResponse>, callback: grpc_1.sendUnaryData<ForceFeedbackCommandResponse>): void;
        abstract ReplaySearchSessionTime(call: grpc_1.ServerUnaryCall<ReplaySearchSessionTimeRequest, ReplaySearchSessionTimeResponse>, callback: grpc_1.sendUnaryData<ReplaySearchSessionTimeResponse>): void;
        abstract VideoCapture(call: grpc_1.ServerUnaryCall<VideoCaptureRequest, VideoCaptureResponse>, callback: grpc_1.sendUnaryData<VideoCaptureResponse>): void;
    }
    export class BroadcastClient extends grpc_1.makeGenericClientConstructor(UnimplementedBroadcastService.definition, "Broadcast", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetAvailableCameras: GrpcPromiseServiceInterface<dependency_1.google.protobuf.Empty, GetAvailableCamerasResponse> = (message: dependency_1.google.protobuf.Empty, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<GetAvailableCamerasResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.GetAvailableCameras(message, metadata, options, (error: grpc_1.ServiceError, response: GetAvailableCamerasResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        CameraSwitchPosition: GrpcPromiseServiceInterface<CameraSwitchPositionRequest, CameraSwitchPositionResponse> = (message: CameraSwitchPositionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<CameraSwitchPositionResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.CameraSwitchPosition(message, metadata, options, (error: grpc_1.ServiceError, response: CameraSwitchPositionResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        CameraSwitchNumber: GrpcPromiseServiceInterface<CameraSwitchNumberRequest, CameraSwitchNumberResponse> = (message: CameraSwitchNumberRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<CameraSwitchNumberResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.CameraSwitchNumber(message, metadata, options, (error: grpc_1.ServiceError, response: CameraSwitchNumberResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        CameraSetState: GrpcPromiseServiceInterface<CameraSetStateRequest, CameraSetStateResponse> = (message: CameraSetStateRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<CameraSetStateResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.CameraSetState(message, metadata, options, (error: grpc_1.ServiceError, response: CameraSetStateResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        ReplaySetPlaySpeed: GrpcPromiseServiceInterface<ReplaySetPlaySpeedRequest, ReplaySetPlaySpeedResponse> = (message: ReplaySetPlaySpeedRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<ReplaySetPlaySpeedResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.ReplaySetPlaySpeed(message, metadata, options, (error: grpc_1.ServiceError, response: ReplaySetPlaySpeedResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        ReplaySetPlayPosition: GrpcPromiseServiceInterface<ReplaySetPlayPositionRequest, ReplaySetPlayPositionResponse> = (message: ReplaySetPlayPositionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<ReplaySetPlayPositionResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.ReplaySetPlayPosition(message, metadata, options, (error: grpc_1.ServiceError, response: ReplaySetPlayPositionResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        ReplaySearch: GrpcPromiseServiceInterface<ReplaySearchRequest, ReplaySearchResponse> = (message: ReplaySearchRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<ReplaySearchResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.ReplaySearch(message, metadata, options, (error: grpc_1.ServiceError, response: ReplaySearchResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        ReplaySetState: GrpcPromiseServiceInterface<ReplaySetStateRequest, ReplaySetStateResponse> = (message: ReplaySetStateRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<ReplaySetStateResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.ReplaySetState(message, metadata, options, (error: grpc_1.ServiceError, response: ReplaySetStateResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        ReloadTextures: GrpcPromiseServiceInterface<ReloadTexturesRequest, ReloadTexturesResponse> = (message: ReloadTexturesRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<ReloadTexturesResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.ReloadTextures(message, metadata, options, (error: grpc_1.ServiceError, response: ReloadTexturesResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        ChatCommand: GrpcPromiseServiceInterface<ChatCommandRequest, ChatCommandResponse> = (message: ChatCommandRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<ChatCommandResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.ChatCommand(message, metadata, options, (error: grpc_1.ServiceError, response: ChatCommandResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        PitCommand: GrpcPromiseServiceInterface<PitCommandRequest, PitCommandResponse> = (message: PitCommandRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<PitCommandResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.PitCommand(message, metadata, options, (error: grpc_1.ServiceError, response: PitCommandResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        PitCommandStream: GrpWritableServiceInterface<PitCommandRequest, PitCommandResponse> = (metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PitCommandResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PitCommandResponse>, callback?: grpc_1.requestCallback<PitCommandResponse>): grpc_1.ClientWritableStream<PitCommandRequest> => {
            return super.PitCommandStream(metadata, options, callback);
        };
        TelemetryCommand: GrpcPromiseServiceInterface<TelemetryCommandRequest, TelemetryCommandResponse> = (message: TelemetryCommandRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<TelemetryCommandResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.TelemetryCommand(message, metadata, options, (error: grpc_1.ServiceError, response: TelemetryCommandResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        ForceFeedbackCommand: GrpcPromiseServiceInterface<ForceFeedbackCommandRequest, ForceFeedbackCommandResponse> = (message: ForceFeedbackCommandRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<ForceFeedbackCommandResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.ForceFeedbackCommand(message, metadata, options, (error: grpc_1.ServiceError, response: ForceFeedbackCommandResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        ReplaySearchSessionTime: GrpcPromiseServiceInterface<ReplaySearchSessionTimeRequest, ReplaySearchSessionTimeResponse> = (message: ReplaySearchSessionTimeRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<ReplaySearchSessionTimeResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.ReplaySearchSessionTime(message, metadata, options, (error: grpc_1.ServiceError, response: ReplaySearchSessionTimeResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        VideoCapture: GrpcPromiseServiceInterface<VideoCaptureRequest, VideoCaptureResponse> = (message: VideoCaptureRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<VideoCaptureResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.VideoCapture(message, metadata, options, (error: grpc_1.ServiceError, response: VideoCaptureResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
    }
}
