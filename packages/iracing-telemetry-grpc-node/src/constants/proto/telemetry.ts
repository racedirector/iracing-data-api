/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: proto/telemetry.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/struct";
import * as dependency_2 from "./../google/protobuf/empty";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace iracing.telemetry {
    export class TelemetrySubscriptionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fps?: number;
            keys?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fps" in data && data.fps != undefined) {
                    this.fps = data.fps;
                }
                if ("keys" in data && data.keys != undefined) {
                    this.keys = data.keys;
                }
            }
        }
        get fps() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set fps(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get keys() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set keys(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            fps?: number;
            keys?: string[];
        }): TelemetrySubscriptionRequest {
            const message = new TelemetrySubscriptionRequest({});
            if (data.fps != null) {
                message.fps = data.fps;
            }
            if (data.keys != null) {
                message.keys = data.keys;
            }
            return message;
        }
        toObject() {
            const data: {
                fps?: number;
                keys?: string[];
            } = {};
            if (this.fps != null) {
                data.fps = this.fps;
            }
            if (this.keys != null) {
                data.keys = this.keys;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fps != 0)
                writer.writeUint32(1, this.fps);
            if (this.keys.length)
                writer.writeRepeatedString(2, this.keys);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TelemetrySubscriptionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TelemetrySubscriptionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fps = reader.readUint32();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TelemetrySubscriptionRequest {
            return TelemetrySubscriptionRequest.deserialize(bytes);
        }
    }
    export class GetTelemetryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            keys?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("keys" in data && data.keys != undefined) {
                    this.keys = data.keys;
                }
            }
        }
        get keys() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set keys(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            keys?: string[];
        }): GetTelemetryRequest {
            const message = new GetTelemetryRequest({});
            if (data.keys != null) {
                message.keys = data.keys;
            }
            return message;
        }
        toObject() {
            const data: {
                keys?: string[];
            } = {};
            if (this.keys != null) {
                data.keys = this.keys;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.keys.length)
                writer.writeRepeatedString(1, this.keys);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTelemetryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTelemetryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTelemetryRequest {
            return GetTelemetryRequest.deserialize(bytes);
        }
    }
    export class GetTelemetryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            telemetry?: dependency_1.google.protobuf.Struct;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("telemetry" in data && data.telemetry != undefined) {
                    this.telemetry = data.telemetry;
                }
            }
        }
        get telemetry() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 1) as dependency_1.google.protobuf.Struct;
        }
        set telemetry(value: dependency_1.google.protobuf.Struct) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_telemetry() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            telemetry?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
        }): GetTelemetryResponse {
            const message = new GetTelemetryResponse({});
            if (data.telemetry != null) {
                message.telemetry = dependency_1.google.protobuf.Struct.fromObject(data.telemetry);
            }
            return message;
        }
        toObject() {
            const data: {
                telemetry?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
            } = {};
            if (this.telemetry != null) {
                data.telemetry = this.telemetry.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_telemetry)
                writer.writeMessage(1, this.telemetry, () => this.telemetry.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTelemetryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTelemetryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.telemetry, () => message.telemetry = dependency_1.google.protobuf.Struct.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTelemetryResponse {
            return GetTelemetryResponse.deserialize(bytes);
        }
    }
    export class GetTelemetryStringResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            telemetry?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("telemetry" in data && data.telemetry != undefined) {
                    this.telemetry = data.telemetry;
                }
            }
        }
        get telemetry() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set telemetry(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            telemetry?: string;
        }): GetTelemetryStringResponse {
            const message = new GetTelemetryStringResponse({});
            if (data.telemetry != null) {
                message.telemetry = data.telemetry;
            }
            return message;
        }
        toObject() {
            const data: {
                telemetry?: string;
            } = {};
            if (this.telemetry != null) {
                data.telemetry = this.telemetry;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.telemetry.length)
                writer.writeString(1, this.telemetry);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTelemetryStringResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTelemetryStringResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.telemetry = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTelemetryStringResponse {
            return GetTelemetryStringResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedTelemetryService {
        static definition = {
            DumpTelemetry: {
                path: "/iracing.telemetry.Telemetry/DumpTelemetry",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTelemetryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTelemetryResponse.deserialize(new Uint8Array(bytes))
            },
            DumpTelemetryString: {
                path: "/iracing.telemetry.Telemetry/DumpTelemetryString",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTelemetryStringResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTelemetryStringResponse.deserialize(new Uint8Array(bytes))
            },
            GetTelemetry: {
                path: "/iracing.telemetry.Telemetry/GetTelemetry",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTelemetryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTelemetryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTelemetryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTelemetryResponse.deserialize(new Uint8Array(bytes))
            },
            GetTelemetryString: {
                path: "/iracing.telemetry.Telemetry/GetTelemetryString",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetTelemetryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTelemetryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTelemetryStringResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTelemetryStringResponse.deserialize(new Uint8Array(bytes))
            },
            RequestTelemetryStream: {
                path: "/iracing.telemetry.Telemetry/RequestTelemetryStream",
                requestStream: true,
                responseStream: true,
                requestSerialize: (message: GetTelemetryRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetTelemetryRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTelemetryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTelemetryResponse.deserialize(new Uint8Array(bytes))
            },
            SubscribeTelemetryStream: {
                path: "/iracing.telemetry.Telemetry/SubscribeTelemetryStream",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: TelemetrySubscriptionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TelemetrySubscriptionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTelemetryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTelemetryResponse.deserialize(new Uint8Array(bytes))
            },
            SubscribeTelemetryStringStream: {
                path: "/iracing.telemetry.Telemetry/SubscribeTelemetryStringStream",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: TelemetrySubscriptionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TelemetrySubscriptionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetTelemetryStringResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetTelemetryStringResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract DumpTelemetry(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, GetTelemetryResponse>, callback: grpc_1.sendUnaryData<GetTelemetryResponse>): void;
        abstract DumpTelemetryString(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, GetTelemetryStringResponse>, callback: grpc_1.sendUnaryData<GetTelemetryStringResponse>): void;
        abstract GetTelemetry(call: grpc_1.ServerUnaryCall<GetTelemetryRequest, GetTelemetryResponse>, callback: grpc_1.sendUnaryData<GetTelemetryResponse>): void;
        abstract GetTelemetryString(call: grpc_1.ServerUnaryCall<GetTelemetryRequest, GetTelemetryStringResponse>, callback: grpc_1.sendUnaryData<GetTelemetryStringResponse>): void;
        abstract RequestTelemetryStream(call: grpc_1.ServerDuplexStream<GetTelemetryRequest, GetTelemetryResponse>): void;
        abstract SubscribeTelemetryStream(call: grpc_1.ServerWritableStream<TelemetrySubscriptionRequest, GetTelemetryResponse>): void;
        abstract SubscribeTelemetryStringStream(call: grpc_1.ServerWritableStream<TelemetrySubscriptionRequest, GetTelemetryStringResponse>): void;
    }
    export class TelemetryClient extends grpc_1.makeGenericClientConstructor(UnimplementedTelemetryService.definition, "Telemetry", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        DumpTelemetry: GrpcPromiseServiceInterface<dependency_2.google.protobuf.Empty, GetTelemetryResponse> = (message: dependency_2.google.protobuf.Empty, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<GetTelemetryResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.DumpTelemetry(message, metadata, options, (error: grpc_1.ServiceError, response: GetTelemetryResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        DumpTelemetryString: GrpcPromiseServiceInterface<dependency_2.google.protobuf.Empty, GetTelemetryStringResponse> = (message: dependency_2.google.protobuf.Empty, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<GetTelemetryStringResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.DumpTelemetryString(message, metadata, options, (error: grpc_1.ServiceError, response: GetTelemetryStringResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        GetTelemetry: GrpcPromiseServiceInterface<GetTelemetryRequest, GetTelemetryResponse> = (message: GetTelemetryRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<GetTelemetryResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.GetTelemetry(message, metadata, options, (error: grpc_1.ServiceError, response: GetTelemetryResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        GetTelemetryString: GrpcPromiseServiceInterface<GetTelemetryRequest, GetTelemetryStringResponse> = (message: GetTelemetryRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<GetTelemetryStringResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.GetTelemetryString(message, metadata, options, (error: grpc_1.ServiceError, response: GetTelemetryStringResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        RequestTelemetryStream: GrpcChunkServiceInterface<GetTelemetryRequest, GetTelemetryResponse> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<GetTelemetryRequest, GetTelemetryResponse> => {
            return super.RequestTelemetryStream(metadata, options);
        };
        SubscribeTelemetryStream: GrpcStreamServiceInterface<TelemetrySubscriptionRequest, GetTelemetryResponse> = (message: TelemetrySubscriptionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<GetTelemetryResponse> => {
            return super.SubscribeTelemetryStream(message, metadata, options);
        };
        SubscribeTelemetryStringStream: GrpcStreamServiceInterface<TelemetrySubscriptionRequest, GetTelemetryStringResponse> = (message: TelemetrySubscriptionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<GetTelemetryStringResponse> => {
            return super.SubscribeTelemetryStringStream(message, metadata, options);
        };
    }
}
