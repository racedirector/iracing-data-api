/**
 * @fileoverview gRPC-Web generated client stub for iracing.telemetry
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: proto/telemetry.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb'; // proto import: "google/protobuf/empty.proto"
import * as proto_telemetry_pb from '../proto/telemetry_pb'; // proto import: "proto/telemetry.proto"


export class TelemetryClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorDumpTelemetry = new grpcWeb.MethodDescriptor(
    '/iracing.telemetry.Telemetry/DumpTelemetry',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    proto_telemetry_pb.GetTelemetryResponse,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    proto_telemetry_pb.GetTelemetryResponse.deserializeBinary
  );

  dumpTelemetry(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<proto_telemetry_pb.GetTelemetryResponse>;

  dumpTelemetry(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_telemetry_pb.GetTelemetryResponse) => void): grpcWeb.ClientReadableStream<proto_telemetry_pb.GetTelemetryResponse>;

  dumpTelemetry(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_telemetry_pb.GetTelemetryResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/iracing.telemetry.Telemetry/DumpTelemetry',
        request,
        metadata || {},
        this.methodDescriptorDumpTelemetry,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/iracing.telemetry.Telemetry/DumpTelemetry',
    request,
    metadata || {},
    this.methodDescriptorDumpTelemetry);
  }

  methodDescriptorDumpTelemetryString = new grpcWeb.MethodDescriptor(
    '/iracing.telemetry.Telemetry/DumpTelemetryString',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    proto_telemetry_pb.GetTelemetryStringResponse,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    proto_telemetry_pb.GetTelemetryStringResponse.deserializeBinary
  );

  dumpTelemetryString(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<proto_telemetry_pb.GetTelemetryStringResponse>;

  dumpTelemetryString(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_telemetry_pb.GetTelemetryStringResponse) => void): grpcWeb.ClientReadableStream<proto_telemetry_pb.GetTelemetryStringResponse>;

  dumpTelemetryString(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_telemetry_pb.GetTelemetryStringResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/iracing.telemetry.Telemetry/DumpTelemetryString',
        request,
        metadata || {},
        this.methodDescriptorDumpTelemetryString,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/iracing.telemetry.Telemetry/DumpTelemetryString',
    request,
    metadata || {},
    this.methodDescriptorDumpTelemetryString);
  }

  methodDescriptorGetTelemetry = new grpcWeb.MethodDescriptor(
    '/iracing.telemetry.Telemetry/GetTelemetry',
    grpcWeb.MethodType.UNARY,
    proto_telemetry_pb.GetTelemetryRequest,
    proto_telemetry_pb.GetTelemetryResponse,
    (request: proto_telemetry_pb.GetTelemetryRequest) => {
      return request.serializeBinary();
    },
    proto_telemetry_pb.GetTelemetryResponse.deserializeBinary
  );

  getTelemetry(
    request: proto_telemetry_pb.GetTelemetryRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_telemetry_pb.GetTelemetryResponse>;

  getTelemetry(
    request: proto_telemetry_pb.GetTelemetryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_telemetry_pb.GetTelemetryResponse) => void): grpcWeb.ClientReadableStream<proto_telemetry_pb.GetTelemetryResponse>;

  getTelemetry(
    request: proto_telemetry_pb.GetTelemetryRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_telemetry_pb.GetTelemetryResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/iracing.telemetry.Telemetry/GetTelemetry',
        request,
        metadata || {},
        this.methodDescriptorGetTelemetry,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/iracing.telemetry.Telemetry/GetTelemetry',
    request,
    metadata || {},
    this.methodDescriptorGetTelemetry);
  }

  methodDescriptorGetTelemetryString = new grpcWeb.MethodDescriptor(
    '/iracing.telemetry.Telemetry/GetTelemetryString',
    grpcWeb.MethodType.UNARY,
    proto_telemetry_pb.GetTelemetryRequest,
    proto_telemetry_pb.GetTelemetryStringResponse,
    (request: proto_telemetry_pb.GetTelemetryRequest) => {
      return request.serializeBinary();
    },
    proto_telemetry_pb.GetTelemetryStringResponse.deserializeBinary
  );

  getTelemetryString(
    request: proto_telemetry_pb.GetTelemetryRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_telemetry_pb.GetTelemetryStringResponse>;

  getTelemetryString(
    request: proto_telemetry_pb.GetTelemetryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_telemetry_pb.GetTelemetryStringResponse) => void): grpcWeb.ClientReadableStream<proto_telemetry_pb.GetTelemetryStringResponse>;

  getTelemetryString(
    request: proto_telemetry_pb.GetTelemetryRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_telemetry_pb.GetTelemetryStringResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/iracing.telemetry.Telemetry/GetTelemetryString',
        request,
        metadata || {},
        this.methodDescriptorGetTelemetryString,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/iracing.telemetry.Telemetry/GetTelemetryString',
    request,
    metadata || {},
    this.methodDescriptorGetTelemetryString);
  }

  methodDescriptorSubscribeTelemetryStream = new grpcWeb.MethodDescriptor(
    '/iracing.telemetry.Telemetry/SubscribeTelemetryStream',
    grpcWeb.MethodType.SERVER_STREAMING,
    proto_telemetry_pb.TelemetrySubscriptionRequest,
    proto_telemetry_pb.GetTelemetryResponse,
    (request: proto_telemetry_pb.TelemetrySubscriptionRequest) => {
      return request.serializeBinary();
    },
    proto_telemetry_pb.GetTelemetryResponse.deserializeBinary
  );

  subscribeTelemetryStream(
    request: proto_telemetry_pb.TelemetrySubscriptionRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<proto_telemetry_pb.GetTelemetryResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/iracing.telemetry.Telemetry/SubscribeTelemetryStream',
      request,
      metadata || {},
      this.methodDescriptorSubscribeTelemetryStream);
  }

  methodDescriptorSubscribeTelemetryStringStream = new grpcWeb.MethodDescriptor(
    '/iracing.telemetry.Telemetry/SubscribeTelemetryStringStream',
    grpcWeb.MethodType.SERVER_STREAMING,
    proto_telemetry_pb.TelemetrySubscriptionRequest,
    proto_telemetry_pb.GetTelemetryStringResponse,
    (request: proto_telemetry_pb.TelemetrySubscriptionRequest) => {
      return request.serializeBinary();
    },
    proto_telemetry_pb.GetTelemetryStringResponse.deserializeBinary
  );

  subscribeTelemetryStringStream(
    request: proto_telemetry_pb.TelemetrySubscriptionRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<proto_telemetry_pb.GetTelemetryStringResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/iracing.telemetry.Telemetry/SubscribeTelemetryStringStream',
      request,
      metadata || {},
      this.methodDescriptorSubscribeTelemetryStringStream);
  }

}

