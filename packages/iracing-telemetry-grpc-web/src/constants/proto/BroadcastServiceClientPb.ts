/**
 * @fileoverview gRPC-Web generated client stub for iracing.broadcast
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: proto/broadcast.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb'; // proto import: "google/protobuf/empty.proto"
import * as proto_broadcast_pb from '../proto/broadcast_pb'; // proto import: "proto/broadcast.proto"


export class BroadcastClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetAvailableCameras = new grpcWeb.MethodDescriptor(
    '/iracing.broadcast.Broadcast/GetAvailableCameras',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    proto_broadcast_pb.GetAvailableCamerasResponse,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    proto_broadcast_pb.GetAvailableCamerasResponse.deserializeBinary
  );

  getAvailableCameras(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<proto_broadcast_pb.GetAvailableCamerasResponse>;

  getAvailableCameras(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.GetAvailableCamerasResponse) => void): grpcWeb.ClientReadableStream<proto_broadcast_pb.GetAvailableCamerasResponse>;

  getAvailableCameras(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.GetAvailableCamerasResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/iracing.broadcast.Broadcast/GetAvailableCameras',
        request,
        metadata || {},
        this.methodDescriptorGetAvailableCameras,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/iracing.broadcast.Broadcast/GetAvailableCameras',
    request,
    metadata || {},
    this.methodDescriptorGetAvailableCameras);
  }

  methodDescriptorCameraSwitchPosition = new grpcWeb.MethodDescriptor(
    '/iracing.broadcast.Broadcast/CameraSwitchPosition',
    grpcWeb.MethodType.UNARY,
    proto_broadcast_pb.CameraSwitchPositionRequest,
    proto_broadcast_pb.CameraSwitchPositionResponse,
    (request: proto_broadcast_pb.CameraSwitchPositionRequest) => {
      return request.serializeBinary();
    },
    proto_broadcast_pb.CameraSwitchPositionResponse.deserializeBinary
  );

  cameraSwitchPosition(
    request: proto_broadcast_pb.CameraSwitchPositionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_broadcast_pb.CameraSwitchPositionResponse>;

  cameraSwitchPosition(
    request: proto_broadcast_pb.CameraSwitchPositionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.CameraSwitchPositionResponse) => void): grpcWeb.ClientReadableStream<proto_broadcast_pb.CameraSwitchPositionResponse>;

  cameraSwitchPosition(
    request: proto_broadcast_pb.CameraSwitchPositionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.CameraSwitchPositionResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/iracing.broadcast.Broadcast/CameraSwitchPosition',
        request,
        metadata || {},
        this.methodDescriptorCameraSwitchPosition,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/iracing.broadcast.Broadcast/CameraSwitchPosition',
    request,
    metadata || {},
    this.methodDescriptorCameraSwitchPosition);
  }

  methodDescriptorCameraSwitchNumber = new grpcWeb.MethodDescriptor(
    '/iracing.broadcast.Broadcast/CameraSwitchNumber',
    grpcWeb.MethodType.UNARY,
    proto_broadcast_pb.CameraSwitchNumberRequest,
    proto_broadcast_pb.CameraSwitchNumberResponse,
    (request: proto_broadcast_pb.CameraSwitchNumberRequest) => {
      return request.serializeBinary();
    },
    proto_broadcast_pb.CameraSwitchNumberResponse.deserializeBinary
  );

  cameraSwitchNumber(
    request: proto_broadcast_pb.CameraSwitchNumberRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_broadcast_pb.CameraSwitchNumberResponse>;

  cameraSwitchNumber(
    request: proto_broadcast_pb.CameraSwitchNumberRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.CameraSwitchNumberResponse) => void): grpcWeb.ClientReadableStream<proto_broadcast_pb.CameraSwitchNumberResponse>;

  cameraSwitchNumber(
    request: proto_broadcast_pb.CameraSwitchNumberRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.CameraSwitchNumberResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/iracing.broadcast.Broadcast/CameraSwitchNumber',
        request,
        metadata || {},
        this.methodDescriptorCameraSwitchNumber,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/iracing.broadcast.Broadcast/CameraSwitchNumber',
    request,
    metadata || {},
    this.methodDescriptorCameraSwitchNumber);
  }

  methodDescriptorCameraSetState = new grpcWeb.MethodDescriptor(
    '/iracing.broadcast.Broadcast/CameraSetState',
    grpcWeb.MethodType.UNARY,
    proto_broadcast_pb.CameraSetStateRequest,
    proto_broadcast_pb.CameraSetStateResponse,
    (request: proto_broadcast_pb.CameraSetStateRequest) => {
      return request.serializeBinary();
    },
    proto_broadcast_pb.CameraSetStateResponse.deserializeBinary
  );

  cameraSetState(
    request: proto_broadcast_pb.CameraSetStateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_broadcast_pb.CameraSetStateResponse>;

  cameraSetState(
    request: proto_broadcast_pb.CameraSetStateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.CameraSetStateResponse) => void): grpcWeb.ClientReadableStream<proto_broadcast_pb.CameraSetStateResponse>;

  cameraSetState(
    request: proto_broadcast_pb.CameraSetStateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.CameraSetStateResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/iracing.broadcast.Broadcast/CameraSetState',
        request,
        metadata || {},
        this.methodDescriptorCameraSetState,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/iracing.broadcast.Broadcast/CameraSetState',
    request,
    metadata || {},
    this.methodDescriptorCameraSetState);
  }

  methodDescriptorReplaySetPlaySpeed = new grpcWeb.MethodDescriptor(
    '/iracing.broadcast.Broadcast/ReplaySetPlaySpeed',
    grpcWeb.MethodType.UNARY,
    proto_broadcast_pb.ReplaySetPlaySpeedRequest,
    proto_broadcast_pb.ReplaySetPlaySpeedResponse,
    (request: proto_broadcast_pb.ReplaySetPlaySpeedRequest) => {
      return request.serializeBinary();
    },
    proto_broadcast_pb.ReplaySetPlaySpeedResponse.deserializeBinary
  );

  replaySetPlaySpeed(
    request: proto_broadcast_pb.ReplaySetPlaySpeedRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_broadcast_pb.ReplaySetPlaySpeedResponse>;

  replaySetPlaySpeed(
    request: proto_broadcast_pb.ReplaySetPlaySpeedRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.ReplaySetPlaySpeedResponse) => void): grpcWeb.ClientReadableStream<proto_broadcast_pb.ReplaySetPlaySpeedResponse>;

  replaySetPlaySpeed(
    request: proto_broadcast_pb.ReplaySetPlaySpeedRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.ReplaySetPlaySpeedResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/iracing.broadcast.Broadcast/ReplaySetPlaySpeed',
        request,
        metadata || {},
        this.methodDescriptorReplaySetPlaySpeed,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/iracing.broadcast.Broadcast/ReplaySetPlaySpeed',
    request,
    metadata || {},
    this.methodDescriptorReplaySetPlaySpeed);
  }

  methodDescriptorReplaySetPlayPosition = new grpcWeb.MethodDescriptor(
    '/iracing.broadcast.Broadcast/ReplaySetPlayPosition',
    grpcWeb.MethodType.UNARY,
    proto_broadcast_pb.ReplaySetPlayPositionRequest,
    proto_broadcast_pb.ReplaySetPlayPositionResponse,
    (request: proto_broadcast_pb.ReplaySetPlayPositionRequest) => {
      return request.serializeBinary();
    },
    proto_broadcast_pb.ReplaySetPlayPositionResponse.deserializeBinary
  );

  replaySetPlayPosition(
    request: proto_broadcast_pb.ReplaySetPlayPositionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_broadcast_pb.ReplaySetPlayPositionResponse>;

  replaySetPlayPosition(
    request: proto_broadcast_pb.ReplaySetPlayPositionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.ReplaySetPlayPositionResponse) => void): grpcWeb.ClientReadableStream<proto_broadcast_pb.ReplaySetPlayPositionResponse>;

  replaySetPlayPosition(
    request: proto_broadcast_pb.ReplaySetPlayPositionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.ReplaySetPlayPositionResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/iracing.broadcast.Broadcast/ReplaySetPlayPosition',
        request,
        metadata || {},
        this.methodDescriptorReplaySetPlayPosition,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/iracing.broadcast.Broadcast/ReplaySetPlayPosition',
    request,
    metadata || {},
    this.methodDescriptorReplaySetPlayPosition);
  }

  methodDescriptorReplaySearch = new grpcWeb.MethodDescriptor(
    '/iracing.broadcast.Broadcast/ReplaySearch',
    grpcWeb.MethodType.UNARY,
    proto_broadcast_pb.ReplaySearchRequest,
    proto_broadcast_pb.ReplaySearchResponse,
    (request: proto_broadcast_pb.ReplaySearchRequest) => {
      return request.serializeBinary();
    },
    proto_broadcast_pb.ReplaySearchResponse.deserializeBinary
  );

  replaySearch(
    request: proto_broadcast_pb.ReplaySearchRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_broadcast_pb.ReplaySearchResponse>;

  replaySearch(
    request: proto_broadcast_pb.ReplaySearchRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.ReplaySearchResponse) => void): grpcWeb.ClientReadableStream<proto_broadcast_pb.ReplaySearchResponse>;

  replaySearch(
    request: proto_broadcast_pb.ReplaySearchRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.ReplaySearchResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/iracing.broadcast.Broadcast/ReplaySearch',
        request,
        metadata || {},
        this.methodDescriptorReplaySearch,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/iracing.broadcast.Broadcast/ReplaySearch',
    request,
    metadata || {},
    this.methodDescriptorReplaySearch);
  }

  methodDescriptorReplaySetState = new grpcWeb.MethodDescriptor(
    '/iracing.broadcast.Broadcast/ReplaySetState',
    grpcWeb.MethodType.UNARY,
    proto_broadcast_pb.ReplaySetStateRequest,
    proto_broadcast_pb.ReplaySetStateResponse,
    (request: proto_broadcast_pb.ReplaySetStateRequest) => {
      return request.serializeBinary();
    },
    proto_broadcast_pb.ReplaySetStateResponse.deserializeBinary
  );

  replaySetState(
    request: proto_broadcast_pb.ReplaySetStateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_broadcast_pb.ReplaySetStateResponse>;

  replaySetState(
    request: proto_broadcast_pb.ReplaySetStateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.ReplaySetStateResponse) => void): grpcWeb.ClientReadableStream<proto_broadcast_pb.ReplaySetStateResponse>;

  replaySetState(
    request: proto_broadcast_pb.ReplaySetStateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.ReplaySetStateResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/iracing.broadcast.Broadcast/ReplaySetState',
        request,
        metadata || {},
        this.methodDescriptorReplaySetState,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/iracing.broadcast.Broadcast/ReplaySetState',
    request,
    metadata || {},
    this.methodDescriptorReplaySetState);
  }

  methodDescriptorReloadTextures = new grpcWeb.MethodDescriptor(
    '/iracing.broadcast.Broadcast/ReloadTextures',
    grpcWeb.MethodType.UNARY,
    proto_broadcast_pb.ReloadTexturesRequest,
    proto_broadcast_pb.ReloadTexturesResponse,
    (request: proto_broadcast_pb.ReloadTexturesRequest) => {
      return request.serializeBinary();
    },
    proto_broadcast_pb.ReloadTexturesResponse.deserializeBinary
  );

  reloadTextures(
    request: proto_broadcast_pb.ReloadTexturesRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_broadcast_pb.ReloadTexturesResponse>;

  reloadTextures(
    request: proto_broadcast_pb.ReloadTexturesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.ReloadTexturesResponse) => void): grpcWeb.ClientReadableStream<proto_broadcast_pb.ReloadTexturesResponse>;

  reloadTextures(
    request: proto_broadcast_pb.ReloadTexturesRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.ReloadTexturesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/iracing.broadcast.Broadcast/ReloadTextures',
        request,
        metadata || {},
        this.methodDescriptorReloadTextures,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/iracing.broadcast.Broadcast/ReloadTextures',
    request,
    metadata || {},
    this.methodDescriptorReloadTextures);
  }

  methodDescriptorChatCommand = new grpcWeb.MethodDescriptor(
    '/iracing.broadcast.Broadcast/ChatCommand',
    grpcWeb.MethodType.UNARY,
    proto_broadcast_pb.ChatCommandRequest,
    proto_broadcast_pb.ChatCommandResponse,
    (request: proto_broadcast_pb.ChatCommandRequest) => {
      return request.serializeBinary();
    },
    proto_broadcast_pb.ChatCommandResponse.deserializeBinary
  );

  chatCommand(
    request: proto_broadcast_pb.ChatCommandRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_broadcast_pb.ChatCommandResponse>;

  chatCommand(
    request: proto_broadcast_pb.ChatCommandRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.ChatCommandResponse) => void): grpcWeb.ClientReadableStream<proto_broadcast_pb.ChatCommandResponse>;

  chatCommand(
    request: proto_broadcast_pb.ChatCommandRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.ChatCommandResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/iracing.broadcast.Broadcast/ChatCommand',
        request,
        metadata || {},
        this.methodDescriptorChatCommand,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/iracing.broadcast.Broadcast/ChatCommand',
    request,
    metadata || {},
    this.methodDescriptorChatCommand);
  }

  methodDescriptorPitCommand = new grpcWeb.MethodDescriptor(
    '/iracing.broadcast.Broadcast/PitCommand',
    grpcWeb.MethodType.UNARY,
    proto_broadcast_pb.PitCommandRequest,
    proto_broadcast_pb.PitCommandResponse,
    (request: proto_broadcast_pb.PitCommandRequest) => {
      return request.serializeBinary();
    },
    proto_broadcast_pb.PitCommandResponse.deserializeBinary
  );

  pitCommand(
    request: proto_broadcast_pb.PitCommandRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_broadcast_pb.PitCommandResponse>;

  pitCommand(
    request: proto_broadcast_pb.PitCommandRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.PitCommandResponse) => void): grpcWeb.ClientReadableStream<proto_broadcast_pb.PitCommandResponse>;

  pitCommand(
    request: proto_broadcast_pb.PitCommandRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.PitCommandResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/iracing.broadcast.Broadcast/PitCommand',
        request,
        metadata || {},
        this.methodDescriptorPitCommand,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/iracing.broadcast.Broadcast/PitCommand',
    request,
    metadata || {},
    this.methodDescriptorPitCommand);
  }

  methodDescriptorTelemetryCommand = new grpcWeb.MethodDescriptor(
    '/iracing.broadcast.Broadcast/TelemetryCommand',
    grpcWeb.MethodType.UNARY,
    proto_broadcast_pb.TelemetryCommandRequest,
    proto_broadcast_pb.TelemetryCommandResponse,
    (request: proto_broadcast_pb.TelemetryCommandRequest) => {
      return request.serializeBinary();
    },
    proto_broadcast_pb.TelemetryCommandResponse.deserializeBinary
  );

  telemetryCommand(
    request: proto_broadcast_pb.TelemetryCommandRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_broadcast_pb.TelemetryCommandResponse>;

  telemetryCommand(
    request: proto_broadcast_pb.TelemetryCommandRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.TelemetryCommandResponse) => void): grpcWeb.ClientReadableStream<proto_broadcast_pb.TelemetryCommandResponse>;

  telemetryCommand(
    request: proto_broadcast_pb.TelemetryCommandRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.TelemetryCommandResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/iracing.broadcast.Broadcast/TelemetryCommand',
        request,
        metadata || {},
        this.methodDescriptorTelemetryCommand,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/iracing.broadcast.Broadcast/TelemetryCommand',
    request,
    metadata || {},
    this.methodDescriptorTelemetryCommand);
  }

  methodDescriptorForceFeedbackCommand = new grpcWeb.MethodDescriptor(
    '/iracing.broadcast.Broadcast/ForceFeedbackCommand',
    grpcWeb.MethodType.UNARY,
    proto_broadcast_pb.ForceFeedbackCommandRequest,
    proto_broadcast_pb.ForceFeedbackCommandResponse,
    (request: proto_broadcast_pb.ForceFeedbackCommandRequest) => {
      return request.serializeBinary();
    },
    proto_broadcast_pb.ForceFeedbackCommandResponse.deserializeBinary
  );

  forceFeedbackCommand(
    request: proto_broadcast_pb.ForceFeedbackCommandRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_broadcast_pb.ForceFeedbackCommandResponse>;

  forceFeedbackCommand(
    request: proto_broadcast_pb.ForceFeedbackCommandRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.ForceFeedbackCommandResponse) => void): grpcWeb.ClientReadableStream<proto_broadcast_pb.ForceFeedbackCommandResponse>;

  forceFeedbackCommand(
    request: proto_broadcast_pb.ForceFeedbackCommandRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.ForceFeedbackCommandResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/iracing.broadcast.Broadcast/ForceFeedbackCommand',
        request,
        metadata || {},
        this.methodDescriptorForceFeedbackCommand,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/iracing.broadcast.Broadcast/ForceFeedbackCommand',
    request,
    metadata || {},
    this.methodDescriptorForceFeedbackCommand);
  }

  methodDescriptorReplaySearchSessionTime = new grpcWeb.MethodDescriptor(
    '/iracing.broadcast.Broadcast/ReplaySearchSessionTime',
    grpcWeb.MethodType.UNARY,
    proto_broadcast_pb.ReplaySearchSessionTimeRequest,
    proto_broadcast_pb.ReplaySearchSessionTimeResponse,
    (request: proto_broadcast_pb.ReplaySearchSessionTimeRequest) => {
      return request.serializeBinary();
    },
    proto_broadcast_pb.ReplaySearchSessionTimeResponse.deserializeBinary
  );

  replaySearchSessionTime(
    request: proto_broadcast_pb.ReplaySearchSessionTimeRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_broadcast_pb.ReplaySearchSessionTimeResponse>;

  replaySearchSessionTime(
    request: proto_broadcast_pb.ReplaySearchSessionTimeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.ReplaySearchSessionTimeResponse) => void): grpcWeb.ClientReadableStream<proto_broadcast_pb.ReplaySearchSessionTimeResponse>;

  replaySearchSessionTime(
    request: proto_broadcast_pb.ReplaySearchSessionTimeRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.ReplaySearchSessionTimeResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/iracing.broadcast.Broadcast/ReplaySearchSessionTime',
        request,
        metadata || {},
        this.methodDescriptorReplaySearchSessionTime,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/iracing.broadcast.Broadcast/ReplaySearchSessionTime',
    request,
    metadata || {},
    this.methodDescriptorReplaySearchSessionTime);
  }

  methodDescriptorVideoCapture = new grpcWeb.MethodDescriptor(
    '/iracing.broadcast.Broadcast/VideoCapture',
    grpcWeb.MethodType.UNARY,
    proto_broadcast_pb.VideoCaptureRequest,
    proto_broadcast_pb.VideoCaptureResponse,
    (request: proto_broadcast_pb.VideoCaptureRequest) => {
      return request.serializeBinary();
    },
    proto_broadcast_pb.VideoCaptureResponse.deserializeBinary
  );

  videoCapture(
    request: proto_broadcast_pb.VideoCaptureRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_broadcast_pb.VideoCaptureResponse>;

  videoCapture(
    request: proto_broadcast_pb.VideoCaptureRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.VideoCaptureResponse) => void): grpcWeb.ClientReadableStream<proto_broadcast_pb.VideoCaptureResponse>;

  videoCapture(
    request: proto_broadcast_pb.VideoCaptureRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_broadcast_pb.VideoCaptureResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/iracing.broadcast.Broadcast/VideoCapture',
        request,
        metadata || {},
        this.methodDescriptorVideoCapture,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/iracing.broadcast.Broadcast/VideoCapture',
    request,
    metadata || {},
    this.methodDescriptorVideoCapture);
  }

}

